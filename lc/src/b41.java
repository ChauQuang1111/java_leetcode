
// 3484. Design Spreadsheet(19/09/2025)
import java.util.*;

public class b41 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        // Nh·∫≠p s·ªë h√†ng (rows), ·ªü ƒë√¢y ch∆∞a d√πng nh∆∞ng v·∫´n ƒë·ªçc
        // int rows = sc.nextInt();

        // Menu test: 1=setCell, 2=resetCell, 3=getValue, 0=tho√°t
        while (true) {
            int cmd = sc.nextInt();
            if (cmd == 0)
                break;

            if (cmd == 1) { // setCell
                String cell = sc.next();
                int val = sc.nextInt();
                setCell(cell, val);
                System.out.println("Set " + cell + " = " + val);
            } else if (cmd == 2) { // resetCell
                String cell = sc.next();
                resetCell(cell);
                System.out.println("Reset " + cell);
            } else if (cmd == 3) { // getValue
                String formula = sc.next();
                int result = getValue(formula);
                System.out.println("Value: " + result);
            }
        }

        sc.close();
    }

    // L∆∞u tr·ªØ d·ªØ li·ªáu √¥: key = "A1", value = s·ªë nguy√™n
    static Map<String, Integer> map = new HashMap<>();

    // ------------------ C√°c h√†m x·ª≠ l√Ω ------------------

    // G√°n gi√° tr·ªã cho 1 √¥
    public static void setCell(String cell, int value) {
        map.put(cell, value);
    }

    // Reset 1 √¥ (x√≥a kh·ªèi map)
    public static void resetCell(String cell) {
        map.remove(cell);
    }

    // L·∫•y gi√° tr·ªã t·ª´ c√¥ng th·ª©c =X+Y (X,Y c√≥ th·ªÉ l√† s·ªë ho·∫∑c √¥)
    public static int getValue(String formula) {
        // T√¨m v·ªã tr√≠ d·∫•u '+'
        int io = formula.indexOf('+');

        // C·∫Øt chu·ªói: b·ªè d·∫•u '=' ·ªü ƒë·∫ßu
        String cell1 = formula.substring(1, io); // v·∫ø tr√°i
        String cell2 = formula.substring(io + 1); // v·∫ø ph·∫£i

        // X·ª≠ l√Ω v·∫ø tr√°i
        int val1;
        if (cell1.charAt(0) > '9') { // N·∫øu b·∫Øt ƒë·∫ßu l√† ch·ªØ c√°i ‚Üí √¥
            val1 = map.getOrDefault(cell1, 0);
        } else { // N·∫øu l√† s·ªë
            val1 = Integer.parseInt(cell1);
        }

        // X·ª≠ l√Ω v·∫ø ph·∫£i
        int val2;
        if (cell2.charAt(0) > '9') { // N·∫øu l√† √¥
            val2 = map.getOrDefault(cell2, 0);
        } else { // N·∫øu l√† s·ªë
            val2 = Integer.parseInt(cell2);
        }

        // Tr·∫£ v·ªÅ t·ªïng
        return val1 + val2;
    }
}

// B·∫°n ƒëang
// h·ªèi v·ªÅ**LeetCode 3484.

// Design Spreadsheet (19/09/2025)** ph·∫£i kh√¥ng?
// M√¨nh s·∫Ω gi·∫£i th√≠ch y√™u c·∫ßu ƒë·ªÅ b√†i cho b·∫°n nh√©.

// ---

// ### **ƒê·ªÅ b√†i (Design Spreadsheet)**

// B·∫°n c·∫ßn thi·∫øt k·∫ø m·ªôt l·ªõp **Spreadsheet** ƒë·ªÉ m√¥ ph·ªèng ho·∫°t ƒë·ªông c·ªßa m·ªôt b·∫£ng
// t√≠nh (gi·ªëng Excel/Google Sheets).

// Spreadsheet c√≥

// c√°c √¥ (cell) ƒë∆∞·ª£c ƒë√°nh s·ªë theo **h√†ng** v√† **c·ªôt**.
// M·ªói √¥ c√≥ th·ªÉ ch·ª©a:

// 1. M·ªôt gi√° tr·ªã s·ªë

// nguy√™n (ƒë∆∞·ª£c g√°n tr·ª±c ti·∫øp).
// 2. M·ªôt c√¥ng th·ª©c l√† **t·ªïng c√°c √¥ kh√°c** (khi ƒë√≥ gi√° tr·ªã ph·ª• thu·ªôc v√†o gi√° tr·ªã
// c·ªßa nh·ªØng √¥ n√†y).

// ---

// ### **C√°c h√†m c·∫ßn c√†i ƒë·∫∑t**

// 1. **Constructor**

// ```java

// Spreadsheet(int rows, int cols)
// ```

// * T·∫°o m·ªôt b·∫£ng t√≠nh c√≥ k√≠ch th∆∞·ªõc `rows x cols`.
// * Ban ƒë·∫ßu t·∫•t c·∫£ √¥ ƒë·ªÅu ch·ª©a gi√° tr·ªã **0**.

// ---

// 2. **setCell(int row, int col, int value)**

// * ƒê·∫∑t **gi√° tr·ªã tr·ª±c ti·∫øp** cho √¥ `(row, col)`.
// * N·∫øu tr∆∞·ªõc ƒë√≥ √¥ ch·ª©a c√¥ng th·ª©c ‚Üí x√≥a c√¥ng th·ª©c, thay b·∫±ng gi√° tr·ªã m·ªõi.

// ---

// 3. **resetCell(int row, int col)**

// * Reset √¥ `(row, col)` v·ªÅ **0**.
// * Lo·∫°i b·ªè

// c√¥ng th·ª©c (n·∫øu c√≥).

// ---

// 4. **sumCell(int row, int col, List<String> formulas) ‚Üí int**

// * G√°n cho √¥ `(row, col)` m·ªôt **c√¥ng th·ª©c t·ªïng**, ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a b·ªüi
// `formulas`.
// * M·ªói ph·∫ßn t·ª≠ trong `formulas` l√†:

// * M·ªôt **√¥ duy nh·∫•t**: `"A1"`, `"B2"`, ‚Ä¶
// * M·ªôt **d·∫£i √¥ (range)**: `"A1:B2"` ‚Üí nghƒ©a l√† t·∫•t c·∫£ c√°c √¥ t·ª´ A1 ƒë·∫øn B2.
// * Sau khi g√°n c√¥ng th·ª©c, √¥ `(row, col)` l∆∞u c√¥ng th·ª©c n√†y.
// * H√†m tr·∫£ v·ªÅ **gi√° tr·ªã t√≠nh to√°n hi·ªán t·∫°i** c·ªßa √¥.

// ---

// 5. **getValue(int row, int col) ‚Üí int**

// * Tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa √¥ `(row, col)`.
// * N·∫øu √¥ ch·ª©a c√¥ng th·ª©c ‚Üí t√≠nh to√°n d·ª±a tr√™n c√¥ng th·ª©c.

// ---

// ### **V√≠ d·ª• minh h·ªça**

// ```text
// Spreadsheet sheet = new Spreadsheet(3, 3);

// // ƒê·∫∑t gi√° tr·ªã tr·ª±c ti·∫øp
// sheet.setCell(1, 1, 5); // √¥ A1 = 5
// sheet.setCell(2, 1, 3); // √¥ A2 = 3

// // C√¥ng th·ª©c t·ªïng
// sheet.sumCell(3, 1, ["A1", "A2"]); // √¥ A3 = A1 + A2 = 8

// // L·∫•y gi√° tr·ªã
// sheet.getValue(3, 1); // = 8

// // Reset √¥
// sheet.resetCell(2, 1); // A2 = 0
// sheet.getValue(3, 1); // = 5 (v√¨ A3 = A1 + A2 = 5 + 0)
// ```

// ---

// üëâ T√≥m l·∫°i: ƒê·ªÅ y√™u c·∫ßu b·∫°n **thi·∫øt k·∫ø m·ªôt b·∫£ng t√≠nh h·ªó tr·ª£ gi√° tr·ªã tr·ª±c ti·∫øp
// + c√¥ng th·ª©c c·ªông**, c√≥ th·ªÉ **set, reset, sum, get value**.
// N√≥ gi·ªëng nh∆∞ m·ªôt phi√™n b·∫£n **mini Excel engine**.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **ph√°c th·∫£o code class `Spreadsheet` b·∫±ng Java**
// cho d·ªÖ h√¨nh dung kh√¥ng?

// Oküëçm√¨nh gi·∫£i th√≠ch chi ti·∫øt t·ª´ng ph·∫ßn trong code`Spreadsheet`m√† b·∫°n vi·∫øt:

// ---

// ###1. Khai b√°o v√† kh·ªüi t·∫°o

// ```java
// class Spreadsheet {
// public Spreadsheet(int rows) {
// }

// Map<String, Integer> map = new HashMap<>();```

// *`rows`
// ch∆∞a d√πng, nh∆∞ng
// √Ω nghƒ©a
// l√† s·ªë
// h√†ng trong b·∫£ng.*`map`l√†**
// b·∫£n ƒë·ªì
// l∆∞u gi√°
// tr·ªã t·ª´ng √¥**.

// *key=

// t√™n √¥ (v√≠ d·ª• `"A1"`, `"B2"`)
// * value = s·ªë nguy√™n trong √¥.

// ---

// ### 2. G√°n v√† reset √¥

// ```java

// public void setCell(String cell, int value) {
// map.put(cell, value);
// }

// public void resetCell(String cell) {
// map.remove(cell);
// }```

// *`setCell("A1", 10)` ‚Üí map = `{A1=10}`
// * `resetCell("A1")` ‚Üí x√≥a A1 kh·ªèi map ‚Üí map r·ªóng.

// ---

// ### 3. T√≠nh gi√° tr·ªã c√¥ng th·ª©c

// ```java

// public int getValue(String formula) {
// int io = formula.indexOf('+');
// String cell1 = formula.substring(1, io);
// String cell2 = formula.substring(io + 1);
// ```

// * `formula` d·∫°ng `"=A1+6"` ho·∫∑c `"=5+7"`.
// * B·ªè qua k√Ω t·ª± `=` ƒë·∫ßu ti√™n.
// * T√¨m d·∫•u `+`.
// * Chia c√¥ng th·ª©c th√†nh **2 ph·∫ßn**:

// * `cell1` =

// v·∫ø tr√°i (sau `=` ƒë·∫øn tr∆∞·ªõc `+`)
// * `cell2` =

// v·∫ø ph·∫£i (sau `+`).

// V√≠ d·ª•:

// * `"=5+7"` ‚Üí `cell1="5"`, `cell2="7"`
// * `"=A1+6"` ‚Üí `cell1="A1"`, `cell2="6"`

// ---

// ### 4. X·ª≠ l√Ω

// v·∫ø tr√°i (`cell1`)

// ```java
// int val1;
// if (cell1.charAt(0) > '9') {
// val1 = map.getOrDefault(cell1, 0);
// } else {
// val1 = Integer.parseInt(cell1);
// }
// ```

// * N·∫øu k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa `cell1` **kh√¥ng ph·∫£i s·ªë** (`'A' > '9'`) ‚Üí coi l√† t√™n
// √¥, l·∫•y t·ª´ `map`.
// * Ng∆∞·ª£c l·∫°i ‚Üí coi l√† s·ªë nguy√™n, parse ra.

// V√≠ d·ª•:

// * `"A1"` ‚Üí l·∫•y `map.get("A1")`, m·∫∑c ƒë·ªãnh = 0 n·∫øu ch∆∞a c√≥.
// * `"5"` ‚Üí `Integer.parseInt("5") = 5`.

// ---

// ### 5. X·ª≠ l√Ω

// v·∫ø ph·∫£i (`cell2`) (t∆∞∆°ng t·ª±)

// ```java
// int val2;
// if (cell2.charAt(0) > '9') {
// val2 = map.getOrDefault(cell2, 0);
// } else {
// val2 = Integer.parseInt(cell2);
// }
// ```

// ---

// ### 6. Tr·∫£ k·∫øt qu·∫£

// ```java
// return val1 + val2;
// ```

// * Tr·∫£ v·ªÅ t·ªïng c·ªßa

// hai v·∫ø (c√≥ th·ªÉ l√† s·ªë ho·∫∑c gi√° tr·ªã √¥).

// ---

// ### üîë √ù t∆∞·ªüng thu·∫≠t to√°n

// 1. C√¥ng th·ª©c **ch·ªâ h·ªó tr·ª£ d·∫°ng `=X+Y`** (X, Y c√≥ th·ªÉ l√† s·ªë ho·∫∑c t√™n √¥).
// 2. C·∫Øt chu·ªói th√†nh 2 ph·∫ßn quanh d·∫•u `+`.
// 3. N·∫øu ph·∫ßn l√† s·ªë ‚Üí parse s·ªë, n·∫øu ph·∫ßn l√† √¥ ‚Üí l·∫•y t·ª´ `map`.
// 4. Tr·∫£ v·ªÅ t·ªïng 2 ph·∫ßn.

// ---

// ### V√≠ d·ª• minh h·ªça

// ```java
// Spreadsheet sheet = new Spreadsheet(3);

// System.out.println(sheet.getValue("=5+7")); // 12

// sheet.setCell("A1", 10);
// System.out.println(sheet.getValue("=A1+6")); // 16

// sheet.setCell("B2", 15);
// System.out.println(sheet.getValue("=A1+B2")); // 25

// sheet.resetCell("A1");
// System.out.println(sheet.getValue("=A1+B2")); // 15 (A1=0)
// ```

// ---

// üëâ T√≥m g·ªçn:

// * D√πng `map` l∆∞u gi√° tr·ªã √¥.
// * Khi g·∫∑p c√¥ng th·ª©c `=X+Y`, t√°ch l√†m hai, x√°c ƒë·ªãnh s·ªë hay √¥, l·∫•y gi√° tr·ªã, r·ªìi
// c·ªông l·∫°i.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt th√™m **pseudo-code ng·∫Øn g·ªçn** ƒë·ªÉ d·ªÖ nh·ªõ kh√¥ng?

// OK ‚Äî m√¨nh s·∫Ω gi·∫£i **ng·∫Øn g·ªçn, r√µ r√†ng** v·ªÅ b√†i *Design Spreadsheet* (ki·ªÉu b√†i
// ‚Äúthi·∫øt k·∫ø b·∫£ng t√≠nh‚Äù c√≥ `set/get/sum`/c√¥ng th·ª©c), n√™u r√µ **ƒë·ªÅ b√†i th∆∞·ªùng
// g·∫∑p**, **ƒë·∫ßu v√†o / y√™u c·∫ßu**, **c√°ch l∆∞u d·ªØ li·ªáu**, **thu·∫≠t to√°n t√≠nh to√°n
// c√¥ng th·ª©c** v√† **nh·ªØng l∆∞u √Ω/edge cases**. B·∫°n c√≥ th·ªÉ d√πng ph·∫ßn n√†y l√†m
// checklist khi c√†i ƒë·∫∑t.

// ---

// ## üîé M√¥ t·∫£

// ƒë·ªÅ b√†i (phi√™n b·∫£n ph·ªï bi·∫øn)

// Thi·∫øt k·∫ø m·ªôt b·∫£ng t√≠nh (spreadsheet) h·ªó tr·ª£ c√°c thao t√°c ch√≠nh:

// * `set(r, c, val)` ‚Äî g√°n √¥ ·ªü h√†ng `r`, c·ªôt `c` = gi√° tr·ªã nguy√™n `val`. (·ªû m·ªôt
// s·ªë ƒë·ªÅ: h√†ng/c·ªôt b·∫Øt ƒë·∫ßu t·ª´ 1; c·ªôt ƒë∆∞·ª£c k√≠ hi·ªáu A, B, C‚Ä¶)
// * `get(r, c)` ‚Äî tr·∫£ v·ªÅ **gi√° tr·ªã hi·ªán th·ªùi** c·ªßa √¥ `(r,c)`. N·∫øu √¥ ch·ª©a c√¥ng
// th·ª©c th√¨ tr·∫£ gi√° tr·ªã ƒë√£ t√≠nh.
// * `sum(r, c, refs)` ‚Äî ƒë·∫∑t √¥ `(r,c)` b·∫±ng **t·ªïng** c√°c tham chi·∫øu `refs`, n∆°i
// m·ªói tham chi·∫øu l√†:

// * m·ªôt √¥ ƒë∆°n `A1`, ho·∫∑c
// * m·ªôt range `A1:B2` (t·ª©c t·∫•t c·∫£ √¥ trong v√πng ƒë√≥),
// * or m·ªôt list k·∫øt

// h·ª£p (v√≠ d·ª• `["A1","A1:B2","C3"]`).
// * Sau g·ªçi `sum`, √¥ `(r,c)` ch·ª©a **c√¥ng th·ª©c** thay v√¨ m·ªôt s·ªë c·ªë ƒë·ªãnh ‚Äî v√† gi√°
// tr·ªã c·ªßa n√≥ l√† t·ªïng c√°c √¥ tham chi·∫øu (ƒë·ªông: n·∫øu √¥ tham chi·∫øu thay ƒë·ªïi th√¨ gi√°
// tr·ªã ph·∫£i c·∫≠p nh·∫≠t).
// * Khi `set` m·ªôt √¥ m√† √¥ ƒë√≥ tr∆∞·ªõc ƒë√≥ c√≥ c√¥ng th·ª©c th√¨ c√¥ng th·ª©c b·ªã x√≥a (tr·ªü
// th√†nh gi√° tr·ªã c·ªë ƒë·ªãnh).
// * Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho m·ªói `get`.

// M·ª•c ti√™u: thi·∫øt k·∫ø c·∫•u tr√∫c d·ªØ li·ªáu + thu·∫≠t to√°n ƒë·ªÉ th·ª±c hi·ªán c√°c thao t√°c
// ƒë√∫ng (v√† hi·ªáu qu·∫£).

// ---

// ## üß† √ù t∆∞·ªüng ch√≠nh / y√™u c·∫ßu k·ªπ thu·∫≠t

// * **Ph·∫£i h·ªó tr·ª£ c√¥ng th·ª©c ph·ª• thu·ªôc (dependencies)**: khi √¥ A tham chi·∫øu ƒë·∫øn
// B v√† C, v√† B thay ƒë·ªïi ‚Üí A ph·∫£i ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
// * **L∆∞u c√¥ng th·ª©c** thay v√¨ t√≠nh c·ª©ng, ƒë·ªÉ khi √¥ ngu·ªìn thay ƒë·ªïi ta c√≥ th·ªÉ t√°i
// t√≠nh.
// * **Tr√°nh t√≠nh th·ª´a** b·∫±ng memoization / t√°i t√≠nh c√≥ ki·ªÉm so√°t (DFS + cache)
// ho·∫∑c duy tr√¨ ƒë·ªì th·ªã ph·ª• thu·ªôc (topo order / incremental updates).
// * Gi·∫£ s·ª≠ **kh√¥ng c√≥ v√≤ng ph·ª•

// thu·ªôc (no cycles)** ‚Äî ƒëa s·ªë ƒë·ªÅ cho v·∫≠y; n·∫øu c√≥ cycles c·∫ßn x·ª≠ l√Ω t√°ch ph√°t
// hi·ªán v√≤ng.

// ---

// ## üßæ C·∫•u tr√∫c d·ªØ li·ªáu ƒë·ªÅ xu·∫•t

// 1. `value[r][c]` ‚Äî l∆∞u **gi√° tr·ªã hi·ªán t·∫°i** (int)

// c·ªßa √¥ (n·∫øu √¥ c√≥ formula th√¨ v·∫´n l∆∞u gi√° tr·ªã sau khi t√≠nh).
// 2. `formula[r][c]` ‚Äî l∆∞u c√¥ng th·ª©c c·ªßa √¥ n·∫øu

// c√≥ (v√≠ d·ª• danh s√°ch c√°c tham chi·∫øu g·ªëc, ho·∫∑c map cell‚Üícount).
// 3. `dependents` (graph): cho m·ªói √¥ `x`, l∆∞u danh s√°ch √¥ `y` ph·ª• thu·ªôc v√†o `x`
// (x ‚Üí y). D√πng ƒë·ªÉ c·∫≠p nh·∫≠t khi `x` thay ƒë·ªïi.
// 4. (Tu·ª≥ ch·ªçn) `refsMap[r][c]` ‚Äî cho √¥ c√≥ c√¥ng th·ª©c, l∆∞u map {cell -> times}
// nghƒ©a l√† √¥ ƒë∆∞·ª£c tham chi·∫øu bao nhi√™u l·∫ßn (ƒë·ªÉ d·ªÖ t√≠nh t·ªïng m√† kh√¥ng ph·∫£i parse
// range nhi·ªÅu l·∫ßn).

// ---

// ## üîÅ Hai c√°ch c·∫≠p nh·∫≠t khi √¥ thay ƒë·ªïi

// ### A. T√≠nh on-demand (DFS + memo)

// * Khi `get(r,c)` ho·∫∑c khi c·∫ßn tr·∫£ gi√° tr·ªã sau `sum` g·ªçi, ta **t√≠nh ƒë·ªá quy**
// d·ª±a v√†o `formula`:

// * N·∫øu √¥ c√≥ gi√°

// tr·ªã tƒ©nh (no formula) ‚Üí tr·∫£ `value`.
// * N·∫øu c√≥ formula ‚Üí t√≠nh t·ªïng `sum( compute(cell) * count )` cho t·ª´ng tham
// chi·∫øu.
// * D√πng memo trong l·∫ßn t√≠nh ƒë·ªÉ kh√¥ng t√≠nh l·∫°i c√πng √¥ nhi·ªÅu l·∫ßn.
// * Khi `set` m·ªôt √¥ ‚Üí c·∫≠p nh·∫≠t `value`, x√≥a `formula` n·∫øu c√≥; nh∆∞ng ƒë·ªÉ `get`
// ƒë√∫ng cho √¥ ph·ª• thu·ªôc, c√≥ th·ªÉ c·∫ßn x√≥a cache ho·∫∑c recompute khi truy v·∫•n ti·∫øp.
// * ∆Øu: ƒë∆°n gi·∫£n; nh∆∞·ª£c: n·∫øu nhi·ªÅu `get`/`sum` l·∫∑p l·∫°i v√† b·∫£ng l·ªõn c√≥ th·ªÉ ch·∫≠m.

// ###

// B. Incremental update (propagate)

// * Khi `set(r,c,val)` ho·∫∑c khi g√°n c√¥ng th·ª©c m·ªõi:

// *

// T√≠nh delta (s·ª± thay ƒë·ªïi c·ªßa √¥ `x`): `delta = newValue - oldValue`.
// * Duy·ªát BFS/DFS tr√™n `dependents` ƒë·ªÉ c·ªông `delta` v√†o t·ª´ng √¥ ph·ª•

// thu·ªôc (v√¨ A = sum(...) s·∫Ω tƒÉng gi·∫£m theo).
// * ƒê·ªÉ l√†m ƒë∆∞·ª£c, khi t·∫°o c√¥ng th·ª©c cho m·ªôt √¥ ta ph·∫£i:

// * T√≠nh tr∆∞·ªõc gi√° tr·ªã c·ªßa c√¥ng th·ª©c d·ª±a tr√™n gi√° tr·ªã hi·ªán c√≥.
// * V·ªõi m·ªói √¥ ngu·ªìn `s` trong c√¥ng th·ª©c, th√™m `target` v√†o `dependents[s]`.
// * Khi `set` gi√° tr·ªã, x√≥a c√°c li√™n

// k·∫øt c≈© (n·∫øu √¥ tr∆∞·ªõc ƒë√≥ c√≥ c√¥ng th·ª©c) ‚Üí c·∫≠p nh·∫≠t `dependents` t∆∞∆°ng ·ª©ng.
// * ∆Øu: `get` O(1) (ch·ªâ ƒë·ªçc `value`); nh∆∞·ª£c: ph·ª©c t·∫°p h∆°n khi x·ª≠ l√Ω nhi·ªÅu thay
// ƒë·ªïi, ph·∫£i qu·∫£n l√Ω dependents ch√≠nh x√°c.

// ---

// ## üîß Parsing tham chi·∫øu (refs)

// * 2 lo·∫°i ref:

// * `A1` ‚Äî c·ªôt k√Ω t·ª±(s) + h√†ng s·ªë. C·∫ßn h√†m chuy·ªÉn c·ªôt ch·ªØ (`"A"->0, "Z"->25,
// "AA"->26, ...`) v√† h√†ng -1 n·∫øu index base 1.
// * `A1:B2` ‚Äî v√πng: parse 2 √¥, l·∫∑p rows & cols trong ph·∫°m vi ƒë·ªÉ th√™m tham
// chi·∫øu.
// * Khi t·∫°o `refsMap`, n·∫øu `A1:B2` ch·ª©a nhi·ªÅu √¥ th√¨ m·ªói √¥

// tƒÉng count (n l·∫ßn n·∫øu range l·∫∑p).

// ---

// ## üîÅ C√°c thao t√°c c·∫ßn

// c√†i ƒë·∫∑t (t√≥m t·∫Øt)

// * `set(r, c, val)`:

// * N·∫øu tr∆∞·ªõc ƒë√≥ `(r,c)` c√≥ formula: remove c√°c li√™n k·∫øt dependents t·ª´ nh·ªØng √¥
// ngu·ªìn ‚Üí (ƒë·ªÉ tr√°nh c·∫≠p nh·∫≠t sai).
// * G√°n `value[r][c] = val`, `formula[r][c] = null`.
// * N·∫øu d√πng incremental: t√≠nh `delta = val - oldValue` r·ªìi propagate ƒë·∫øn
// dependents.
// * `sum(r, c, refs)`:

// * Parse `refs` th√†nh `refsMap` (cell‚Üícount).
// * N·∫øu tr∆∞·ªõc ƒë√≥ √¥ c√≥ formula: remove li√™n k·∫øt c≈©.
// * For each source cell `s` in refsMap: add `(r,c)` v√†o `dependents[s]`.
// * T√≠nh `value[r][c] = sum( value[s] * count )`.
// * L∆∞u `formula[r][c] = refsMap`.
// * (N·∫øu incremental, sau thay ƒë·ªïi refs c·∫ßn propagate delta ƒë·∫øn dependents).
// * `get(r, c)`:

// * N·∫øu incremental ‚Üí tr·∫£ `value[r][c]`.
// * N·∫øu on-demand ‚Üí n·∫øu formula: compute recursively; else tr·∫£ `value`.

// ---

// ## üîç V√≠ d·ª•

// minh h·ªça (incremental)

// * wordlist style:

// s·ª≠ d·ª•ng (r,c) numeric; gi·∫£ s·ª≠ A1 ‚Üí (0,0)

// 1. `set(0,0,5)` ‚Üí value\[A1]=5
// 2. `set(0,1,3)` ‚Üí value\[B1]=3
// 3. `sum(0,2, ["A1","B1"])` ‚Üí C1 = A1 + B1 = 8; ƒë·ªìng th·ªùi th√™m dependents:
// A1‚ÜíC1, B1‚ÜíC1
// 4. `set(0,0,7)` ‚Üí A1 tƒÉng 2 ‚Üí propagate: C1 += 2 ‚Üí C1 = 10

// ---

// ## ‚ö†Ô∏è Edge cases & l∆∞u √Ω

// * **Indexing**: input c√≥ th·ªÉ d√πng 1-based index; ph·∫£i chu·∫©n h√≥a.
// * **C·ªôt nhi·ªÅu ch·ªØ**: `"AA"`, `"AB"` c·∫ßn chuy·ªÉn ƒë·ªïi base-26.
// * **V√≤ng l·∫∑p (cyclic)**: n·∫øu problem cho ph√©p, c·∫ßn ph√°t hi·ªán v√† x·ª≠ l√Ω; th∆∞·ªùng
// ƒë·ªÅ s·∫Ω lo·∫°i tr·ª´.
// * **Nhi·ªÅu tham chi·∫øu l·∫∑p**: `sum(A1,A1,A1)` (ƒë·∫øm nhi·ªÅu l·∫ßn) ‚Äî ph·∫£i x·ª≠ l√Ω c√°ch
// l∆∞u count.
// * **Hi·ªáu nƒÉng**: n·∫øu b·∫£ng l·ªõn v√† nhi·ªÅu updates, incremental update l√† t·ªët
// h∆°n; n·∫øu √≠t update/get th√¨ on-demand ƒë∆°n gi·∫£n h∆°n.
// * **Chu·ªói/r√†ng bu·ªôc**: Ki·ªÉm so√°t memory cho maps.

// ---

// ## ‚è±Ô∏è ƒê·ªô ph·ª©c

// t·∫°p (∆∞·ªõc l∆∞·ª£ng)

// * Parsing refs of a sum: `O(k + totalCellsInRanges)` (k = s·ªë refs).
// * Incremental `set`:

// * worst-case: propagate t·ªõi t·∫•t c·∫£ dependents (c√≥ th·ªÉ O(N) with N cells) ‚Äî
// nh∆∞ng amortized th∆∞·ªùng nh·ªè n·∫øu DAG kh√¥ng qu√° l·ªõn.
// * `get`:

// * incremental: O(1)
// * on-demand: O(size of dependency subtree) (v·ªõi memo O(subtree) m·ªói l·∫ßn)

// ---

// ## ‚úÖ T√≥m t·∫Øt

// d·ªÖ nh·ªõ (flash)

// * L∆∞u `value`, `formula` (map cell‚Üícount), `dependents`.
// * `set` = g√°n gi√° tr·ªã, x√≥a formula c≈©, propagate delta.
// * `sum` = parse refs ‚Üí l∆∞u formula, register dependents cho t·ª´ng source ‚Üí
// compute value.
// * `get` = ƒë·ªçc `value` (ho·∫∑c compute n·∫øu on-demand).
// * X·ª≠ l√Ω ref range & column-string ‚Üí index conversion.
// * Tr√°nh v√≤ng l·∫∑p; n·∫øu c√≥, c·∫ßn ph√°t hi·ªán.

// ---

// N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ:

// * Vi·∫øt 1 **c√†i ƒë·∫∑t v√≠ d·ª• b·∫±ng Java** (incremental ho·∫∑c on-demand) v·ªõi ƒë·∫ßy ƒë·ªß
// h√†m `set/get/sum` + parser `A1` ‚Üî indices; ho·∫∑c
// * Vi·∫øt **b·∫£n Python** t∆∞∆°ng ƒë∆∞∆°ng; ho·∫∑c
// * Vi·∫øt **flowchart + pseudo-code Java** ng·∫Øn g·ªçn cho implementation
// incremental.

// B·∫°n mu·ªën m√¨nh

// xu·∫•t code (Java/Python) hay pseudo-code ti·∫øp theo?

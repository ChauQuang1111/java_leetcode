// 3495. Minimum Operations to Make Array Elements Zero(06/09/2025)

import java.util.*;

public class b28 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {

        int q = sc.nextInt(); // s·ªë l∆∞·ª£ng queries
        int[][] queries = new int[q][2];

        for (int i = 0; i < q; i++) {
            queries[i][0] = sc.nextInt(); // l
            queries[i][1] = sc.nextInt(); // r
        }
        long res = minOperations(queries);
        sc.close();
        System.out.println(res);
    }

    public static long minOperations(int[][] queries) {
        long res = 0;
        // Duy·ªát qua t·ª´ng query v√† c·ªông d·ªìn k·∫øt qu·∫£
        for (int[] query : queries)
            res += minOperationsOneQuery(query);
        return res;
    }

    public static long minOperationsOneQuery(int[] query) {
        long res0 = 0; // s·ªë l·∫ßn chia c·∫ßn thi·∫øt cho ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n query[0]
        long x = 1; // m·ªëc ban ƒë·∫ßu (1, 4, 16, 64, ...) bi·ªÉu di·ªÖn l≈©y th·ª´a c·ªßa 4

        // T√¨m xem query[0] n·∫±m trong kho·∫£ng n√†o c·ªßa [1,4), [4,16), [16,64), ...
        // res0 = s·ªë l·∫ßn chia c·∫ßn thi·∫øt cho query[0]
        while (x < query[0]) {
            res0++;
            x *= 4;
        }

        long res1 = res0; // res1: s·ªë b∆∞·ªõc chia cho kho·∫£ng hi·ªán t·∫°i
        long res = 0; // t·ªïng s·ªë l·∫ßn chia cho to√†n kho·∫£ng [l, r]
        long prev = query[0]; // ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa kho·∫£ng ta ƒëang t√≠nh

        // X·ª≠ l√Ω t·ª´ng ƒëo·∫°n [prev, x) cho ƒë·∫øn khi v∆∞·ª£t qu√° query[1]
        while (x <= query[1] * 4L) {
            // V·ªõi ƒëo·∫°n [prev, min(x, r+1)), m·ªói s·ªë trong ƒëo·∫°n n√†y c·∫ßn res1 l·∫ßn chia
            res += res1 * (Math.min(x, query[1] + 1) - prev);

            // C·∫≠p nh·∫≠t prev sang ƒëi·ªÉm ti·∫øp theo
            prev = x;

            // Sang ƒëo·∫°n ti·∫øp theo th√¨ c·∫ßn th√™m 1 l·∫ßn chia
            res1++;

            // Nh·∫£y sang m·ªëc ti·∫øp theo (nh√¢n 4)
            x *= 4;
        }

        // V√¨ m·ªói thao t√°c chia ƒë∆∞·ª£c 2 s·ªë c√πng l√∫c
        // => s·ªë thao t√°c = ceil(res / 2) = (res + 1) / 2
        return (res + 1) / 2;
    }

}
// Hay,

// b·∫°n ƒë·ªÉ
// √Ω r·∫•t k·ªπüëç
// m√¨nh gi·∫£i
// th√≠ch r√µ ch·ªó`4L`
// n√†y nh√©:

// Trong code:

// ```java while(x<=query[1]*4L)
// {
// ```

// ---

// ### 1. T·∫°i sao l·∫°i nh√¢n v·ªõi `4`?

// Nh∆∞ m√¨nh gi·∫£i th√≠ch, ta ƒëang x√©t c√°c **m·ªëc l≈©y th·ª´a c·ªßa 4**:

// ```
// 1, 4, 16, 64, ...
// ```

// Khi x·ª≠ l√Ω ƒëo·∫°n `[l, r]`, ta mu·ªën bao ph·ªß h·∫øt ƒëo·∫°n n√†y b·∫±ng c√°c m·ªëc.

// * N·∫øu d·ª´ng ·ªü `x <= query[1]`, th√¨ c√≥ th·ªÉ b·ªã thi·∫øu ƒëo·∫°n cu·ªëi c√πng.
// * V√¨ th·∫ø, nh√¢n th√™m `4` ƒë·ªÉ ch·∫Øc ch·∫Øn l√† **m·ªëc cu·ªëi c√πng (l·ªõn h∆°n r) ƒë√£ ƒë∆∞·ª£c
// x√©t**, ƒë·∫£m b·∫£o v√≤ng l·∫∑p bao tr√πm h·∫øt `[l, r]`.

// ---

// ### 2. T·∫°i sao vi·∫øt `4L` m√† kh√¥ng ph·∫£i `4`?

// * `query[1]` l√† `int`.
// * N·∫øu vi·∫øt `query[1] * 4`, k·∫øt qu·∫£ l√† `int`, c√≥ th·ªÉ b·ªã **tr√†n s·ªë** khi
// `query[1]` l·ªõn (v√¨ `int` ch·ªâ t·ªëi ƒëa \~2.1 t·ªâ).
// * Vi·∫øt `4L` √©p ki·ªÉu v·ªÅ `long`, n√™n `query[1] * 4L` l√† `long`, an to√†n khi so
// s√°nh v·ªõi `x` (v·ªën l√† `long`).

// ---

// ‚úÖ T√≥m l·∫°i:

// ```java
// while (x <= query[1] * 4L)
// ```

// * `*4` ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y ƒë·ªß c√°c m·ªëc 4^k bao tr√πm ƒë·∫øn sau r.
// * `L` ƒë·ªÉ √©p ki·ªÉu v·ªÅ `long`, tr√°nh tr√†n s·ªë v√† ƒë·ªìng b·ªô ki·ªÉu d·ªØ li·ªáu v·ªõi bi·∫øn
// `x`.

// √Ä m√¨nh
// gi·∫£i th√≠ch
// k·ªπ h∆°n
// ch·ªó n√†y nh√©üëå

// Trong code:

// ```java
// long x = 1; // m·ªëc ban ƒë·∫ßu
// ```

// Sau ƒë√≥
// trong v√≤ng while
// ta c√≥:

// ```
// java x*=4;```

// ‚Üí
// Nghƒ©a l√†
// c√°c gi√°
// tr·ªã c·ªßa`x`
// s·∫Ω l·∫ßn
// l∆∞·ª£t l√†:

// ```1‚Üí4‚Üí16‚Üí64‚Üí256‚Üí...```

// ƒê√¢y ch√≠nh l√†**c√°c l≈©y
// th·ª´a c·ªßa 4**:

// $$
// x = 4^0,4^1,4^2,4^3,...$$

// ---

// ###
// √ù nghƒ©a
// c·ªßa m·ªëc`x`

// N√≥ d√πng
// ƒë·ªÉ chia
// d·∫£i s·ªë nguy√™n`[l,r]`
// th√†nh t·ª´ng**kho·∫£ng**
// m√† trong
// m·ªói kho·∫£ng,**s·ªë l·∫ßn chia 4
// ƒë·ªÉ v·ªÅ 0
// l√† gi·ªëng nhau**.

// V√≠ d·ª•:

// *
// C√°c s·ªë trong**\[1,3]**
// ch·ªâ c·∫ßn**1
// l·∫ßn chia**(`n/4=0`).*
// C√°c s·ªë trong**\[4,15]**c·∫ßn**2
// l·∫ßn chia**(`n/4‚Üín/16‚Üí0`).*
// C√°c s·ªë trong**\[16,63]**c·∫ßn**3
// l·∫ßn chia**.*
// C√°c s·ªë trong**\[64,255]**c·∫ßn**4
// l·∫ßn chia**.

// üìå
// Nh·∫≠n x√©t:
// C√°c kho·∫£ng
// n√†y ƒë√∫ng
// b·∫±ng c√°c ƒëo·∫°n\[1,4),\[4,16),\[16,64),\[64,256),‚Ä¶‚Üí
// ch√≠nh l√†
// c√°c m·ªëc
// l≈©y th·ª´a c·ªßa 4.

// V·∫≠y n√™n`x`
// ch·∫°y qua
// c√°c m·ªëc**1,4,16,64,...**
// ƒë·ªÉ gi√∫p
// ta x√°c
// ƒë·ªãnh ranh
// gi·ªõi gi·ªØa
// nh·ªØng ƒëo·∫°n
// c√≥ c√πng
// s·ªë b∆∞·ªõc chia.

// Ok,
// m√¨nh gi·∫£i
// th√≠ch ƒë·ªÅ b√†i**3495.
// Minimum Operations
// to Make
// Array Elements

// Zero (Hard)** cho b·∫°n th·∫≠t d·ªÖ hi·ªÉu nh√© üëç

// ---

// ### ƒê·ªÅ b√†i n√≥i g√¨?

// B·∫°n ƒë∆∞·ª£c cho m·ªôt m·∫£ng `queries`, m·ªói ph·∫ßn t·ª≠ `queries[i] = [l, r]`.
// V·ªõi m·ªói truy v·∫•n `[l, r]`, ta t·∫°o ra m·ªôt m·∫£ng `nums = [l, l+1, ..., r]`.

// B√¢y gi·ªù ta c·∫ßn th·ª±c hi·ªán **c√°c ph√©p bi·∫øn ƒë·ªïi** tr√™n m·∫£ng `nums` cho ƒë·∫øn khi
// **t·∫•t c·∫£ ph·∫ßn t·ª≠ = 0**.

// ---

// ### Ph√©p bi·∫øn ƒë·ªïi l√† g√¨?

// Trong **m·ªôt l·∫ßn thao t√°c**, ta ch·ªçn **2 s·ªë b·∫•t k·ª≥**

// trong m·∫£ng (gi·∫£ s·ª≠ l√† `a` v√† `b`),
// r·ªìi thay c·∫£ 2 s·ªë ƒë√≥ b·∫±ng:

// * `floor(a / 4)`
// * `floor(b / 4)`

// (Nghƒ©a l√† chia cho 4 v√† l√†m tr√≤n xu·ªëng).

// Ta l·∫∑p l·∫°i thao t√°c n√†y cho ƒë·∫øn khi to√†n b·ªô m·∫£ng tr·ªü th√†nh `0`.

// ---

// ### Nhi·ªám v·ª• c·ªßa b·∫°n:

// * V·ªõi **m·ªói query `[l, r]`**, t√≠nh s·ªë thao t√°c t·ªëi thi·ªÉu c·∫ßn th·ª±c hi·ªán ƒë·ªÉ
// bi·∫øn to√†n b·ªô m·∫£ng `[l, ..., r]` th√†nh 0.
// * Sau ƒë√≥, c·ªông k·∫øt qu·∫£ c·ªßa t·∫•t c·∫£ c√°c query l·∫°i v√† tr·∫£ v·ªÅ.

// ---

// ### V√≠ d·ª•

// Gi·∫£ s·ª≠:

// ```
// queries = [[1,2], [2,4]]
// ```

// #### Query 1: \[1, 2]

// M·∫£ng ban ƒë·∫ßu: `[1, 2]`

// * 1 chia 4 ‚Üí 0
// * 2 chia 4 ‚Üí 0
// ‚Üí Sau **1 l·∫ßn thao t√°c** c·∫£ m·∫£ng th√†nh `[0, 0]`.

// üëâ K·∫øt qu·∫£ query 1 = 1

// ---

// #### Query 2: \[2, 3, 4]

// M·∫£ng ban ƒë·∫ßu: `[2, 3, 4]`

// * V·ªõi s·ªë 2: 2 ‚Üí 0 (ch·ªâ 1 l·∫ßn chia)
// * V·ªõi s·ªë 3: 3 ‚Üí 0 (1 l·∫ßn chia)
// * V·ªõi s·ªë 4: 4 ‚Üí 1 ‚Üí 0 (c·∫ßn 2 l·∫ßn chia)

// T·ªïng c·ªông c√≥ **4 ‚Äúl·∫ßn chia‚Äù ri√™ng l·∫ª**.
// V√¨ m·ªói thao t√°c x·ª≠ l√Ω **2 s·ªë m·ªôt l√∫c**, n√™n s·ªë thao t√°c t·ªëi thi·ªÉu l√†:

// ```
// ceil(4 / 2) = 2
// ```

// üëâ K·∫øt qu·∫£ query 2 = 2

// ---

// ### T·ªïng k·∫øt

// ```
// queries = [[1,2], [2,4]]
// query 1 ‚Üí 1 thao t√°c
// query 2 ‚Üí 2 thao t√°c
// K·∫øt qu·∫£ cu·ªëi c√πng = 1 + 2 = 3
// ```

// ---

// üëâ Nh∆∞ v·∫≠y, ƒë·ªÅ b√†i y√™u c·∫ßu ta:

// * V·ªõi t·ª´ng `[l, r]`, ƒë·∫øm s·ªë l·∫ßn ‚Äúchia cho 4 ƒë·∫øn khi v·ªÅ 0‚Äù cho t·∫•t c·∫£ c√°c s·ªë
// trong kho·∫£ng.
// * Sau ƒë√≥, v√¨ **m·ªói thao t√°c x·ª≠ l√Ω ƒë∆∞·ª£c 2 s·ªë c√πng l√∫c**, n√™n ta l·∫•y `(t·ªïng s·ªë
// l·∫ßn chia + 1) // 2`.
// * Cu·ªëi c√πng c·ªông k·∫øt qu·∫£ c·ªßa t·∫•t c·∫£ c√°c query l·∫°i.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω **s∆° ƒë·ªì tr·ª±c quan** cho v√≠

// d·ª• n√†y (ki·ªÉu c√¢y chia s·ªë ‚Üí 0) ƒë·ªÉ d·ªÖ h√¨nh dung h∆°n kh√¥ng?
// √Ä üëå ƒë√∫ng r·ªìi, ƒë·ªÉ m√¨nh ch·ªânh l·∫°i cho b·∫°n.

// B·∫°n ƒë∆∞a **`queries = [[1,2], [2,4]]`**.
// Nghƒ©a l√†:

// * Query 1 = `[1,2]` ‚Üí m·∫£ng = `[1, 2]`
// * Query 2 = `[2,4]` ‚Üí m·∫£ng = `[2, 3, 4]`

// üëâ S·ªë **3** xu·∫•t hi·ªán l√† v√¨ ƒë·ªÅ b√†i ƒë·ªãnh nghƒ©a: v·ªõi query `[l, r]` th√¨ ta l·∫•y
// **t·∫•t c·∫£ c√°c s·ªë nguy√™n t·ª´ l ƒë·∫øn

// r (bao g·ªìm c·∫£ l v√† r)**.

// V√≠ d·ª•:

// * `[1,2]` ‚Üí `[1,2]`
// * `[2,4]` ‚Üí `[2,3,4]`

// N√™n s·ªë 3 l√† do kho·∫£ng `[2,4]` ch·ª©a lu√¥n n√≥, ch·ª© kh√¥ng ph·∫£i m√¨nh t·ª± th√™m.

// ---

// Ok üëç m√¨nh gi·∫£i th√≠ch r√µ r√†ng v√† ch·∫≠m r√£i ƒëo·∫°n **query 1 = \[1,2]** cho b·∫°n
// nh√©.

// ---

// ### Query 1: `[1, 2]`

// T·ª´ query n√†y, ta t·∫°o m·∫£ng:

// ```
// nums = [1, 2]
// ```

// ---

// ### Quy t·∫Øc thao t√°c

// * M·ªói thao t√°c: ch·ªçn 2 s·ªë `a, b` trong m·∫£ng, thay ch√∫ng b·∫±ng `floor(a/4)` v√†
// `floor(b/4)`.
// * M·ª•c ti√™u: ƒë∆∞a to√†n b·ªô m·∫£ng v·ªÅ `[0,0]`.

// ---

// ### Th·ª±c hi·ªán

// M·∫£ng hi·ªán t·∫°i: `[1, 2]`

// üëâ Ta ch·ªçn lu√¥n c·∫£ 2 s·ªë (v√¨ ch·ªâ c√≥ 2 ph·∫ßn t·ª≠ th√¥i):

// * V·ªõi s·ªë `1`:
// `floor(1 / 4) = 0`

// * V·ªõi s·ªë `2`:
// `floor(2 / 4) = 0`

// Sau 1 thao t√°c, m·∫£ng bi·∫øn th√†nh:

// ```
// [0, 0]
// ```

// ---

// ### K·∫øt lu·∫≠n

// * Ch·ªâ c·∫ßn **1 l·∫ßn thao t√°c** l√† to√†n b·ªô m·∫£ng th√†nh 0.
// üëâ K·∫øt qu·∫£ cho query `[1,2]` l√† **1**.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh gi·∫£i th√≠ch th√™m **t·∫°i sao kh√¥ng th·ªÉ √≠t h∆°n 1 thao t√°c**
// kh√¥ng (t·ª©c l√† b·∫Øt bu·ªôc ph·∫£i l√†m √≠t nh·∫•t 1 l·∫ßn)?
// R·ªìi üëç m√¨nh s·∫Ω di·ªÖn gi·∫£i l·∫°i ƒëo·∫°n n√†y th·∫≠t ch·∫∑t ch·∫Ω ƒë·ªÉ b·∫°n d·ªÖ h√¨nh dung.

// ---

// ### Query 2: `[2, 4]`

// ‚Üí M·∫£ng t·∫°o ra l√†:

// ```
// nums = [2, 3, 4]
// ```

// ---

// ## üîπ B∆∞·ªõc 1: ƒê·∫øm s·ªë l·∫ßn **chia cho 4** ƒë·ªÉ m·ªói s·ªë v·ªÅ 0

// * **S·ªë 2**
// 2 √∑ 4 = 0 ‚Üí ch·ªâ c·∫ßn **1 l·∫ßn chia**

// * **S·ªë 3**
// 3 √∑ 4 = 0 ‚Üí c≈©ng ch·ªâ c·∫ßn **1 l·∫ßn chia**

// * **S·ªë 4**
// 4 √∑ 4 = 1
// 1 √∑ 4 = 0
// ‚Üí c·∫ßn **2 l·∫ßn chia**

// üëâ T·ªïng c·ªông: `1 + 1 + 2 = 4 l·∫ßn chia ri√™ng l·∫ª`

// ---

// ## üîπ B∆∞·ªõc 2: Li√™n h·ªá v·ªõi ‚Äúm·ªôt thao t√°c‚Äù c·ªßa ƒë·ªÅ b√†i

// * ƒê·ªÅ b√†i kh√¥ng cho ta **chia t·ª´ng s·ªë ri√™ng l·∫ª**, m√† b·∫Øt bu·ªôc ph·∫£i ch·ªçn **2 s·ªë
// m·ªôt l√∫c** ƒë·ªÉ x·ª≠ l√Ω.
// * M·ªôt thao t√°c t∆∞∆°ng ƒë∆∞∆°ng v·ªõi **2 l·∫ßn chia** (v√¨ x·ª≠ l√Ω 2 s·ªë).

// V·∫≠y, mu·ªën th·ª±c hi·ªán ƒë·ªß **4 l·∫ßn chia ri√™ng l·∫ª** cho `[2,3,4]`, ta c·∫ßn:

// ```
// s·ªë thao t√°c t·ªëi thi·ªÉu = ceil(4 / 2) = 2
// ```

// ---

// ## ‚úÖ K·∫øt qu·∫£ cho Query `[2,4]` = 2

// ---

// üìå C√°ch hi·ªÉu:

// * **B∆∞·ªõc 1**: ƒê·∫øm xem m·ªói s·ªë ph·∫£i chia bao nhi√™u l·∫ßn m·ªõi v·ªÅ 0.
// * **B∆∞·ªõc 2**: V√¨ m·ªói thao t√°c x·ª≠ l√Ω ƒë∆∞·ª£c 2 s·ªë, n√™n s·ªë thao t√°c = t·ªïng s·ªë l·∫ßn
// chia ri√™ng l·∫ª / 2 (l√†m tr√≤n l√™n).

// ---

// B·∫°n c√≥ mu·ªën m√¨nh **m√¥ ph·ªèng c·ª• th·ªÉ 2 thao t√°c** cho `[2,3,4]` (ch·ªçn s·ªë n√†o ·ªü
// thao t√°c 1, thao t√°c 2) ƒë·ªÉ th·∫•y r√µ h∆°n kh√¥ng?

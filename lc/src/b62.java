
// 3494. Find the Minimum Amount of Time to Brew Potions(09/10/2025)
import java.util.*;

class b62 {
   static Scanner sc = new Scanner(System.in);

   public static void main(String[] args) {

      int n = sc.nextInt();
      int[] skill = new int[n];
      for (int i = 0; i < n; i++) {
         skill[i] = sc.nextInt();
      }

      int m = sc.nextInt();
      int[] mana = new int[m];
      for (int i = 0; i < m; i++) {
         mana[i] = sc.nextInt();
      }

      long result = minTime(skill, mana);

      System.out.println(result);
   }

   public static long minTime(int[] skill, int[] mana) {
      int n = skill.length; // S·ªë l∆∞·ª£ng k·ªπ nƒÉng
      int m = mana.length; // S·ªë l∆∞·ª£ng mana

      // T·∫°o m·∫£ng c·ªông d·ªìn skill ƒë·ªÉ t√≠nh t·ªïng nhanh h∆°n
      long[] acc = new long[n + 1];
      for (int i = 0; i < n; i++) {
         acc[i + 1] = acc[i] + skill[i];
      }

      long t = 0; // L∆∞u gi√° tr·ªã t·ªëi ∆∞u ·ªü b∆∞·ªõc tr∆∞·ªõc
      long t2 = 0; // L∆∞u gi√° tr·ªã t·∫°m th·ªùi ·ªü b∆∞·ªõc hi·ªán t·∫°i

      // Duy·ªát qua t·ª´ng giai ƒëo·∫°n mana
      for (int j = 1; j < m; j++) {
         t2 = 0;
         for (int i = 0; i < n; i++) {
            // C·∫≠p nh·∫≠t gi√° tr·ªã l·ªõn nh·∫•t c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c
            t2 = Math.max(t2, t + mana[j - 1] * acc[i + 1] - mana[j] * acc[i]);
         }
         t = t2; // C·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã t
      }

      // K·∫øt qu·∫£ cu·ªëi c√πng
      return t + mana[m - 1] * acc[n];
   }

}

// D∆∞·ªõi ƒë√¢y l√† **gi·∫£i th√≠ch ƒë·ªÅ b√†i** LeetCode **3494. Find the Minimum Amount of
// Time to Brew Potions**, c√πng v·ªõi c√°c ƒëi·ªÅu ki·ªán, y√™u c·∫ßu v√† m·ªôt s·ªë h∆∞·ªõng g·ª£i √Ω
// ƒë·ªÉ gi·∫£i.
// D∆∞·ªõi ƒë√¢y l√† phi√™n b·∫£n ƒë·∫ßy ƒë·ªß c·ªßa ch∆∞∆°ng tr√¨nh Java c√≥**h√†m`main`**,s·ª≠
// d·ª•ng**`Scanner`ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu**,v√† c√≥**ch√∫ th√≠ch chi ti·∫øt t·ª´ng ph·∫ßn**gi√∫p
// b·∫°n hi·ªÉu r√µ:

// ```java

// import java.util.*;

// public class Main {
// public static void main(String[] args) {
// Scanner sc = new Scanner(System.in);

// // Nh·∫≠p s·ªë ph·∫ßn t·ª≠ c·ªßa m·∫£ng skill
// int n = sc.nextInt();
// int[] skill = new int[n];
// for (int i = 0; i < n; i++) {
// skill[i] = sc.nextInt(); // Nh·∫≠p t·ª´ng gi√° tr·ªã skill
// }

// // Nh·∫≠p s·ªë ph·∫ßn t·ª≠ c·ªßa m·∫£ng mana
// int m = sc.nextInt();
// int[] mana = new int[m];
// for (int i = 0; i < m; i++) {
// mana[i] = sc.nextInt(); // Nh·∫≠p t·ª´ng gi√° tr·ªã mana
// }

// // T·∫°o ƒë·ªëi t∆∞·ª£ng Solution v√† g·ªçi h√†m minTime
// Solution sol = new Solution();
// long result = sol.minTime(skill, mana);

// // In ra k·∫øt qu·∫£
// System.out.println(result);
// }
// }

// class Solution {
// public long minTime(int[] skill, int[] mana) {
// int n = skill.length; // S·ªë l∆∞·ª£ng k·ªπ nƒÉng
// int m = mana.length; // S·ªë l∆∞·ª£ng mana

// // T·∫°o m·∫£ng c·ªông d·ªìn skill ƒë·ªÉ t√≠nh t·ªïng nhanh h∆°n
// long[] acc = new long[n + 1];
// for (int i = 0; i < n; i++) {
// acc[i + 1] = acc[i] + skill[i];
// }

// long t = 0; // L∆∞u gi√° tr·ªã t·ªëi ∆∞u ·ªü b∆∞·ªõc tr∆∞·ªõc
// long t2 = 0; // L∆∞u gi√° tr·ªã t·∫°m th·ªùi ·ªü b∆∞·ªõc hi·ªán t·∫°i

// // Duy·ªát qua t·ª´ng giai ƒëo·∫°n mana
// for (int j = 1; j < m; j++) {
// t2 = 0;
// for (int i = 0; i < n; i++) {
// // C·∫≠p nh·∫≠t gi√° tr·ªã l·ªõn nh·∫•t c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c
// t2 = Math.max(t2, t + mana[j - 1] * acc[i + 1] - mana[j] * acc[i]);
// }
// t = t2; // C·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã t
// }

// // K·∫øt qu·∫£ cu·ªëi c√πng
// return t + mana[m - 1] * acc[n];
// }}```

// ---

// ###üß©

// Gi·∫£i th√≠ch
// ng·∫Øn g·ªçn:

// *`acc[i]`l√†**t·ªïng k·ªπ nƒÉng**
// c·ªßa c√°c
// ph·∫ßn t·ª≠`skill[0..i-1]`.*
// V√≤ng l·∫∑p`for(
// int j = 1;j<m;j++)`
// m√¥ ph·ªèng**
// t·ª´ng giai
// ƒëo·∫°n s·ª≠
// d·ª•ng mana
// kh√°c nhau**.*
// Bi·ªÉu th·ª©c`t+mana[j-1]*acc[i+1]-mana[j]*acc[i]`t√¨m**
// gi√° tr·ªã
// t·ªëi ∆∞u**
// khi chuy·ªÉn
// gi·ªØa hai
// m·ª©c mana
// li√™n ti·∫øp.*
// Cu·ªëi c√πng, tr·∫£
// v·ªÅ t·ªïng
// th·ªùi gian
// t·ªëi thi·ªÉu
// c√≥ th·ªÉ
// ƒë·∫°t ƒë∆∞·ª£c
// sau khi
// x·ª≠ l√Ω
// to√†n b·ªô.

// ---

// B·∫°n c√≥
// mu·ªën t√¥i th√™m**
// v√≠ d·ª• input/output m·∫´u**v√†**
// gi·∫£i th√≠ch
// c√°ch ch∆∞∆°ng
// tr√¨nh ch·∫°y
// c·ª• th·ªÉ**kh√¥ng?

// ---

// ## üß© ƒê·ªÅ b√†i (t√≥m t·∫Øt)

// B·∫°n c√≥:

// * `n` **wizard** (ph√π th·ªßy), g·ªçi l√† `wizard[0]`, `wizard[1]`, ‚Ä¶,
// `wizard[n‚àí1]`.
// * `m` **potion** c·∫ßn ƒë∆∞·ª£c ‚Äúpha ch·∫ø‚Äù theo th·ª© t·ª± (c·∫ßn pha potion 0 tr∆∞·ªõc r·ªìi
// potion 1, v.v.).
// * M·ªói potion `j` c√≥ **mana capacity** l√† `mana[j]`.
// * M·ªói wizard `i` c√≥ m·ªôt **k·ªπ nƒÉng (skill) ho·∫∑c t·ªëc ƒë·ªô** (gi·∫£ s·ª≠ l√† `skill[i]`
// ho·∫∑c gi√° tr·ªã t∆∞∆°ng ·ª©ng) ‚Äî t√πy theo c√°ch ƒë·∫∑t t√™n trong ƒë·ªÅ b√†i.
// * Y√™u c·∫ßu: m·ªói potion khi ƒë∆∞·ª£c pha ch·∫ø s·∫Ω ƒëi qua **t·ª´ng wizard theo th·ª© t·ª±**
// (wizard 0 ‚Üí wizard 1 ‚Üí ‚Ä¶ ‚Üí wizard n‚àí1).

// C·ª• th·ªÉ: ƒë·ªÉ ho√†n th√†nh potion `j`, wizard 0 b·∫Øt ƒë·∫ßu, r·ªìi wizard 1 ti·∫øp t·ª•c,
// v.v.
// M·ªói wizard `i` c·∫ßn th·ªùi gian **`skill[i] * mana[j]`** ƒë·ªÉ x·ª≠ l√Ω potion ƒë√≥ (v√≠
// d·ª• nh√¢n k·ªπ nƒÉng v√† mana).

// Tuy nhi√™n, c√≥ m·ªôt r√†ng bu·ªôc quan tr·ªçng:

// > Khi m·ªôt wizard ho√†n th√†nh vi·ªác x·ª≠ l√Ω potion `j`, wizard ti·∫øp theo b·∫Øt ƒë·∫ßu
// **kh√¥ng s·ªõm h∆°n** th·ªùi ƒëi·ªÉm m√† wizard tr∆∞·ªõc ƒë√≥ ho√†n th√†nh c√°c potion tr∆∞·ªõc
// ƒë√≥, ƒë·ªÉ ƒë·∫£m b·∫£o **tu·∫ßn t·ª± c√¥ng vi·ªác** kh√¥ng b·ªã l·∫≠t ng∆∞·ª£c.

// B·∫°n c·∫ßn t√¨m **th·ªùi gian t·ªëi thi·ªÉu T** sao cho **t·∫•t c·∫£ m potion ƒë·ªÅu ƒë∆∞·ª£c pha
// ch·∫ø xong** (qua t·∫•t c·∫£ wizard) trong th·ªùi gian ‚â§ T.

// ---

// ## ‚öôÔ∏è Nh·ªØng ƒëi·ªÅu c·∫ßn l∆∞u √Ω / r√†ng bu·ªôc

// * Potion ph·∫£i ƒë∆∞·ª£c pha theo th·ª© t·ª±: potion 0 tr∆∞·ªõc, r·ªìi 1, r·ªìi 2...
// * Wizard ph·∫£i x·ª≠ l√Ω potion `j` ch·ªâ sau khi ƒë√£ x·ª≠ l√Ω potion `j-1`.
// * Wizard i kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu potion j tr∆∞·ªõc th·ªùi ƒëi·ªÉm wizard i‚àí1 ho√†n th√†nh
// potion j (v√¨ potion j ph·∫£i ƒëi qua t·∫•t c·∫£ wizard theo th·ª© t·ª±).
// * Gi√° tr·ªã `skill[i]`, `mana[j]`, v√† s·ªë l∆∞·ª£ng wizard/potion ƒë·ªÅu c√≥ th·ªÉ l·ªõn ‚Äî
// c·∫ßn t√¨m c√°ch t·ªëi ∆∞u, kh√¥ng brute force m·ªôt c√°ch th√¥.

// ---

// ## üß† H∆∞·ªõng gi·∫£i √Ω t∆∞·ªüng

// M·ªôt c√°ch ti·∫øp c·∫≠n kh·∫£ thi l√†:

// 1. **Binary Search** th·ªùi gian `T`.
// Gi·∫£ s·ª≠ b·∫°n ƒë·∫∑t th·ªùi gian t·ªëi ƒëa l√† `T`, ki·ªÉm tra xem c√≥ th·ªÉ ho√†n th√†nh t·∫•t c·∫£
// potion trong ‚â§ `T` kh√¥ng.

// 2. C√°ch ki·ªÉm tra (simulate / greedy):

// * Duy·ªát t·ª´ng potion `j` theo th·ª© t·ª±
// * Duy·ªát wizard theo th·ª© t·ª± v√† t√≠nh th·ªùi gian m·ªói wizard x·ª≠ l√Ω
// * Theo r√†ng bu·ªôc ‚Äúkh√¥ng b·∫Øt ƒë·∫ßu tr∆∞·ªõc‚Äù, gi·ªØ cho th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa wizard
// i cho potion j ‚â• th·ªùi gian ho√†n th√†nh wizard (i‚àí1) cho c√πng potion j
// * N·∫øu t·ªïng th·ªùi gian v∆∞·ª£t `T` ‚Üí kh√¥ng th·ªÉ
// * N·∫øu t·∫•t c·∫£ potion th·ª±c hi·ªán xong ‚â§ `T`, th√¨ `T` kh·∫£ thi

// 3. T√¨m gi√° tr·ªã th·∫•p nh·∫•t `T` b·∫±ng binary search.

// ---

// N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ g·ª≠i **phi√™n b·∫£n code Python ho·∫∑c Java ho√†n ch·ªânh**
// cho b√†i n√†y, k√®m **ch√∫ th√≠ch chi ti·∫øt t·ª´ng b∆∞·ªõc**, ƒë·ªÉ b·∫°n hi·ªÉu c√°ch th·ª±c thi.
// B·∫°n mu·ªën m√¨nh g·ª≠i code k√®m gi·∫£i th√≠ch kh√¥ng?
// R·ªìi, ta c√πng **ph√¢n t√≠ch chi ti·∫øt** thu·∫≠t to√°n trong ƒëo·∫°n code n√†y üëá

// ---

// ### üß© **ƒê·ªÅ b√†i t√≥m t·∫Øt (theo c√°ch hi·ªÉu c·ªßa code)**

// C√≥ hai m·∫£ng:

// * `skill[i]`: k·ªπ nƒÉng ho·∫∑c ƒë·ªô kh√≥ c·ªßa lo·∫°i thu·ªëc th·ª© `i`.
// * `mana[j]`: l∆∞·ª£ng nƒÉng l∆∞·ª£ng c·∫ßn ƒë·ªÉ pha thu·ªëc ·ªü giai ƒëo·∫°n th·ª© `j`.

// Ta c·∫ßn t√¨m **th·ªùi gian nh·ªè nh·∫•t (ho·∫∑c nƒÉng l∆∞·ª£ng nh·ªè nh·∫•t)** ƒë·ªÉ ho√†n th√†nh
// to√†n b·ªô qu√° tr√¨nh pha ch·∫ø thu·ªëc ‚Äî qua nhi·ªÅu giai ƒëo·∫°n ‚Äî sao cho t·ªïng th·ªùi
// gian l√† **nh·ªè nh·∫•t c√≥ th·ªÉ**.

// ---

// ### üìò **Gi·∫£i th√≠ch t·ª´ng ph·∫ßn trong code**

// #### 1Ô∏è‚É£ T√≠nh prefix sum (`acc`)

// ```java
// long[] acc = new long[n + 1];
// for (int i = 0; i < n; i++) {
// acc[i + 1] = acc[i] + skill[i];
// }
// ```

// ‚û°Ô∏è `acc[i]` l√† t·ªïng k·ªπ nƒÉng c·ªßa c√°c potion **t·ª´ 0 ƒë·∫øn i-1**
// V√≠ d·ª•:

// ```
// skill = [2, 3, 5]
// acc = [0, 2, 5, 10]
// ```

// T·ª©c l√†:

// * T·ªïng skill ƒë·∫øn potion 1 = 2
// * T·ªïng skill ƒë·∫øn potion 2 = 5
// * T·ªïng skill ƒë·∫øn potion 3 = 10

// Prefix sum gi√∫p ta nhanh ch√≥ng t√≠nh ƒë∆∞·ª£c t·ªïng `skill` trong b·∫•t k·ª≥ ƒëo·∫°n n√†o.

// ---

// #### 2Ô∏è‚É£ Kh·ªüi t·∫°o bi·∫øn

// ```java
// long t = 0, t2 = 0;
// ```

// * `t`: th·ªùi gian (ho·∫∑c chi ph√≠) √≠t nh·∫•t ƒë·∫øn giai ƒëo·∫°n `j-1`.
// * `t2`: th·ªùi gian t·∫°m t√≠nh cho giai ƒëo·∫°n hi·ªán t·∫°i `j`.

// ---

// #### 3Ô∏è‚É£ V√≤ng l·∫∑p qua c√°c giai ƒëo·∫°n pha ch·∫ø (`mana[j]`)

// ```java
// for (int j = 1; j < m; j++) {
// t2 = 0;
// for (int i = 0; i < n; i++) {
// t2 = Math.max(t2, t + mana[j - 1] * acc[i + 1] - mana[j] * acc[i]);
// }
// t = t2;
// }
// ```

// Gi·∫£i th√≠ch chi ti·∫øt:

// * Giai ƒëo·∫°n `j` ph·ª• thu·ªôc v√†o giai ƒëo·∫°n tr∆∞·ªõc (`j-1`).
// * ·ªû m·ªói b∆∞·ªõc, ta **ch·ªçn v·ªã tr√≠ chia i** (v√¨ c√≥ th·ªÉ chuy·ªÉn t·ª´ potion `i` n√†y
// sang potion `i+1` kia).
// T·ª©c l√†, ta x√©t xem n√™n d·ª´ng giai ƒëo·∫°n tr∆∞·ªõc ·ªü ƒë√¢u ƒë·ªÉ t·ªïng chi ph√≠ l√† nh·ªè
// nh·∫•t.

// C√¥ng th·ª©c:

// ```
// t2 = max( t + mana[j-1]*acc[i+1] - mana[j]*acc[i] )
// ```

// √ù nghƒ©a:

// * `t`: th·ªùi gian t√≠ch l≈©y ƒë·∫øn giai ƒëo·∫°n `j-1`
// * `mana[j-1] * acc[i+1]`: chi ph√≠ ho√†n th√†nh potion ƒë·∫øn `i` trong giai ƒëo·∫°n
// tr∆∞·ªõc
// * `mana[j] * acc[i]`: chi ph√≠ b·∫Øt ƒë·∫ßu pha potion `i` trong giai ƒëo·∫°n hi·ªán t·∫°i

// ‚Üí L·∫•y **hi·ªáu gi·ªØa hai ph·∫ßn ƒë√≥** ƒë·ªÉ bi·∫øt n·∫øu ta chia ranh gi·ªõi t·∫°i potion `i`,
// th√¨ t·ªïng th·ªùi gian s·∫Ω thay ƒë·ªïi th·∫ø n√†o.
// ‚Üí D√πng `Math.max` v√¨ ta c·∫ßn ch·ªçn ƒëi·ªÉm d·ª´ng (chia) t·ªëi ∆∞u nh·∫•t.

// ---

// #### 4Ô∏è‚É£ Sau khi qua h·∫øt c√°c giai ƒëo·∫°n

// ```java
// return t + mana[m - 1] * acc[n];
// ```

// * `t`: th·ªùi gian t·ªëi ∆∞u ƒë√£ t√≠nh ƒë·∫øn giai ƒëo·∫°n `m-1`
// * `mana[m - 1] * acc[n]`: chi ph√≠ ƒë·ªÉ pha to√†n b·ªô potion ·ªü giai ƒëo·∫°n cu·ªëi.

// ---

// ### üßÆ **V√≠ d·ª• minh h·ªça**

// Gi·∫£ s·ª≠:

// ```
// skill = [2, 3]
// mana = [5, 2]
// ```

// ‚Üí `acc = [0, 2, 5]`

// * Ban ƒë·∫ßu `t = 0`
// * ·ªû j = 1:

// * i = 0 ‚Üí `t2 = max(0, 0 + 5*2 - 2*0) = 10`
// * i = 1 ‚Üí `t2 = max(10, 0 + 5*5 - 2*2) = max(10, 21) = 21`
// ‚Üí `t = 21`

// Cu·ªëi c√πng:

// ```
// t + mana[m-1] * acc[n] = 21 + 2 * 5 = 31
// ```

// ‚Üí K·∫øt qu·∫£: **31**

// ---

// ### ‚öôÔ∏è **T√≥m t·∫Øt √Ω t∆∞·ªüng**

// * T√≠nh prefix sum `acc` ƒë·ªÉ d·ªÖ t√≠nh t·ªïng skill.
// * Duy·ªát t·ª´ng giai ƒëo·∫°n (m·ªói `mana[j]`) v√† t√¨m ƒëi·ªÉm chia t·ªëi ∆∞u ƒë·ªÉ **gi·∫£m t·ªïng
// th·ªùi gian**.
// * C√¥ng th·ª©c `t + mana[j-1]*acc[i+1] - mana[j]*acc[i]` ƒë·∫£m b·∫£o c√¢n b·∫±ng gi·ªØa
// chi ph√≠ tr∆∞·ªõc v√† sau.
// * Cu·ªëi c√πng c·ªông ph·∫ßn chi ph√≠ c√≤n l·∫°i ·ªü giai ƒëo·∫°n cu·ªëi.

// ---

// N·∫øu b·∫°n mu·ªën, t√¥i c√≥ th·ªÉ **v·∫Ω s∆° ƒë·ªì tr·ª±c quan (diagram)** minh h·ªça c√°ch c√°c
// giai ƒëo·∫°n v√† c√¥ng th·ª©c ho·∫°t ƒë·ªông ‚Äî b·∫°n mu·ªën ch·ª©?


// 976. Largest Perimeter Triangle(28/09/2025)
import java.util.*;

public class b50 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        int n = sc.nextInt();
        int[] nums = new int[n];

        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }

        // G·ªçi h√†m t√≠nh chu vi tam gi√°c l·ªõn nh·∫•t
        int result = largestPerimeter(nums);

        // In k·∫øt qu·∫£
        System.out.println(result);

        sc.close();
    }

    // H√†m t√≠nh chu vi tam gi√°c l·ªõn nh·∫•t
    public static int largestPerimeter(int[] nums) {
        int n = nums.length;

        if (n < 3)
            return 0; // Kh√¥ng ƒë·ªß 3 c·∫°nh ‚Üí kh√¥ng t·∫°o ƒë∆∞·ª£c tam gi√°c

        // B∆∞·ªõc 1: t√¨m 2 c·∫°nh l·ªõn nh·∫•t, ƒë·∫∑t v√†o cu·ªëi m·∫£ng
        selectAndSwapMax(nums, n - 1); // max 1 ‚Üí nums[n-1]
        selectAndSwapMax(nums, n - 2); // max 2 ‚Üí nums[n-2]

        // B∆∞·ªõc 2: duy·ªát t·ª´ cu·ªëi m·∫£ng t·ªõi ph·∫ßn t·ª≠ th·ª© 2
        for (int i = n - 1; i >= 2; i--) {
            // B∆∞·ªõc 2a: t√¨m c·∫°nh l·ªõn th·ª© 3 trong nums[0..i-2] v√† ƒë·∫∑t v√†o nums[i-2]
            selectAndSwapMax(nums, i - 2);

            // B∆∞·ªõc 2b: ki·ªÉm tra ƒëi·ªÅu ki·ªán tam gi√°c
            if (nums[i] < nums[i - 1] + nums[i - 2]) {
                // N·∫øu th·ªèa ‚Üí tr·∫£ v·ªÅ chu vi
                return nums[i] + nums[i - 1] + nums[i - 2];
            }
        }

        // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c tam gi√°c h·ª£p l·ªá
        return 0;
    }

    // H√†m ch·ªçn max trong nums[0..idx] v√† swap v·ªÅ v·ªã tr√≠ idx
    public static void selectAndSwapMax(int[] nums, int idx) {
        if (idx < 0)
            return; // N·∫øu idx < 0 ‚Üí m·∫£ng r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá, tho√°t h√†m

        int maxValue = nums[0]; // L∆∞u gi√° tr·ªã l·ªõn nh·∫•t t·∫°m th·ªùi, kh·ªüi t·∫°o b·∫±ng ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
        int maxIndex = 0; // L∆∞u ch·ªâ s·ªë c·ªßa gi√° tr·ªã l·ªõn nh·∫•t t·∫°m th·ªùi

        // Duy·ªát t·ª´ 1 ƒë·∫øn idx ƒë·ªÉ t√¨m gi√° tr·ªã l·ªõn nh·∫•t trong nums[0..idx]
        for (int i = 1; i <= idx; i++) {
            if (nums[i] > maxValue) {
                maxValue = nums[i]; // C·∫≠p nh·∫≠t gi√° tr·ªã l·ªõn nh·∫•t
                maxIndex = i; // C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa gi√° tr·ªã l·ªõn nh·∫•t
            }
        }

        // ƒê·ªïi ch·ªó gi√° tr·ªã l·ªõn nh·∫•t v·ªõi ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ idx
        int temp = nums[idx];
        nums[idx] = maxValue;
        nums[maxIndex] = temp;
    }
}

// # ### üìå ƒê·ªÅ b√†i:

// # * B·∫°n ƒë∆∞·ª£c cho m·ªôt m·∫£ng s·ªë nguy√™n `nums`, trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ l√† **ƒë·ªô d√†i
// c·∫°nh**.
// # * Nhi·ªám v·ª•: **t√¨m chu vi l·ªõn nh·∫•t c·ªßa m·ªôt tam gi√°c c√≥ th·ªÉ t·∫°o th√†nh t·ª´ 3
// c·∫°nh trong m·∫£ng**.
// # * N·∫øu kh√¥ng th·ªÉ t·∫°o ƒë∆∞·ª£c tam gi√°c h·ª£p l·ªá, tr·∫£ v·ªÅ `0`.

// # ---

// # ### üìå ƒêi·ªÅu ki·ªán t·∫°o tam gi√°c h·ª£p l·ªá:

// # V·ªõi ba c·∫°nh `a, b, c` (s·∫Øp x·∫øp theo `a ‚â§ b ‚â§ c`), c·∫ßn th·ªèa:

// # ```
// # a + b > c
// # ```

// # N·∫øu ƒëi·ªÅu ki·ªán n√†y kh√¥ng ƒë√∫ng th√¨ **kh√¥ng t·∫°o th√†nh tam gi√°c**.

// # ---

// # ### üìå V√≠ d·ª• minh h·ªça:

// # #### V√≠ d·ª• 1:

// # ```
// # Input: nums = [2,1,2]
// # ```

// # * S·∫Øp x·∫øp: [1,2,2]
// # * Ki·ªÉm tra 3 c·∫°nh: `1 + 2 > 2` ‚úÖ ƒë√∫ng ‚Üí t·∫°o ƒë∆∞·ª£c tam gi√°c.
// # * Chu vi = 1 + 2 + 2 = **5**.

// # üëâ Output: `5`

// # ---

// # #### V√≠ d·ª• 2:

// # ```
// # Input: nums = [1,2,1]
// # ```

// # * S·∫Øp x·∫øp: [1,1,2]
// # * Ki·ªÉm tra: `1 + 1 > 2` ‚ùå sai.
// # * Kh√¥ng th·ªÉ t·∫°o tam gi√°c.

// # üëâ Output: `0`

// # ---

// # #### V√≠ d·ª• 3:

// # ```
// # Input: nums = [3,6,2,3]
// # ```

// # * S·∫Øp x·∫øp: [2,3,3,6]
// # * L·∫•y 3 c·∫°nh l·ªõn nh·∫•t [3,3,6]: `3 + 3 > 6` ‚ùå sai.
// # * L·∫•y [2,3,3]: `2 + 3 > 3` ‚úÖ ƒë√∫ng.
// # * Chu vi = 2 + 3 + 3 = **8**.

// # üëâ Output: `8`

// # ---

// # ### üìå √ù t∆∞·ªüng gi·∫£i:

// # 1. S·∫Øp x·∫øp m·∫£ng tƒÉng d·∫ßn.
// # 2. Duy·ªát ng∆∞·ª£c t·ª´ cu·ªëi (c√°c c·∫°nh l·ªõn nh·∫•t) ‚Üí ki·ªÉm tra 3 c·∫°nh li√™n ti·∫øp
// `nums[i-2], nums[i-1], nums[i]`.

// # * N·∫øu t·∫°o th√†nh tam gi√°c, tr·∫£ v·ªÅ chu vi lu√¥n (v√¨ ƒë√≥ l√† chu vi l·ªõn nh·∫•t).
// # 3. N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c, tr·∫£ v·ªÅ `0`.

// # ---

// # B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt code Java/Python k√®m ch√∫ th√≠ch ƒë·ªÉ minh h·ªça lu√¥n
// kh√¥ng?
// Ok, m√¨nh s·∫Ω gi·∫£i th√≠ch thu·∫≠t to√°n trong code Java b·∫°n ƒë∆∞a ra cho **976.
// Largest Perimeter Triangle**:

// ---

// ### üîπ √ù t∆∞·ªüng:

// * Mu·ªën t√¨m **chu vi l·ªõn nh·∫•t c·ªßa tam gi√°c** t·ª´ m·∫£ng `nums`.
// * ƒêi·ªÅu ki·ªán tam gi√°c: 3 c·∫°nh `a ‚â§ b ‚â§ c` ph·∫£i th·ªèa:

// ```
// a + b > c
// ```
// * Thay v√¨ sort c·∫£ m·∫£ng (O(n log n)), thu·∫≠t to√°n n√†y **t√¨m 3 c·∫°nh l·ªõn nh·∫•t d·∫ßn
// d·∫ßn** b·∫±ng ph∆∞∆°ng ph√°p **selection** (O(n¬≤) worst case nh∆∞ng kh√¥ng sort to√†n
// b·ªô).

// ---

// ### üîπ Thu·∫≠t to√°n trong code:

// ```java
// int n = nums.length;

// // B∆∞·ªõc 1: t√¨m 2 c·∫°nh l·ªõn nh·∫•t, ƒë∆∞a v·ªÅ cu·ªëi m·∫£ng
// selectAndSwapMax(nums, n - 1); // max ƒë·∫ßu ti√™n v·ªÅ nums[n-1]
// selectAndSwapMax(nums, n - 2); // max th·ª© 2 v·ªÅ nums[n-2]
// ```

// * `selectAndSwapMax(nums, idx)`:

// * Duy·ªát m·∫£ng t·ª´ `0..idx`, t√¨m max, swap v·ªõi v·ªã tr√≠ `idx`.
// * M·ª•c ƒë√≠ch: ƒë·∫£m b·∫£o `nums[n-1]` v√† `nums[n-2]` l√† 2 c·∫°nh l·ªõn nh·∫•t.

// ---

// ```java
// // B∆∞·ªõc 2: duy·ªát t·ª´ cu·ªëi m·∫£ng t·ªõi v·ªã tr√≠ th·ª© 2
// for (int i = n - 1; i >= 2; i--) {

// // T√¨m c·∫°nh l·ªõn th·ª© 3 trong nums[0..i-2] v√† ƒë∆∞a v·ªÅ nums[i-2]
// selectAndSwapMax(nums, i - 2);

// // Ki·ªÉm tra ƒëi·ªÅu ki·ªán tam gi√°c
// if (nums[i] < nums[i - 1] + nums[i - 2]) {
// return nums[i] + nums[i - 1] + nums[i - 2]; // Chu vi l·ªõn nh·∫•t
// }
// }
// ```

// * Gi·∫£i th√≠ch:

// * V·ªõi `i = n-1`, 3 c·∫°nh l·ªõn nh·∫•t hi·ªán t·∫°i l√†:

// ```
// nums[i-2], nums[i-1], nums[i]
// ```
// * N·∫øu th·ªèa ƒëi·ªÅu ki·ªán tam gi√°c: tr·∫£ v·ªÅ chu vi.
// * N·∫øu kh√¥ng: ti·∫øp t·ª•c duy·ªát `i--`, t√¨m c·∫°nh th·ª© 3 l·ªõn nh·∫•t trong ph·∫ßn c√≤n l·∫°i
// ƒë·ªÉ th·ª≠.

// ---

// ### üîπ H√†m selectAndSwapMax:

// ```java
// private void selectAndSwapMax(int[] nums, int idx) {
// int maxValue = nums[0];
// int maxIndex = 0;

// for (int i = 1; i <= idx; i++) {
// if (nums[i] > maxValue) {
// maxValue = nums[i];
// maxIndex = i;
// }
// }

// int temp = nums[idx];
// nums[idx] = maxValue;
// nums[maxIndex] = temp;
// }
// ```

// * Ch·ªçn max trong `nums[0..idx]` v√† swap v·ªÅ v·ªã tr√≠ `idx`.
// * Gi√∫p 3 c·∫°nh l·ªõn nh·∫•t l·∫ßn l∆∞·ª£t ƒë∆∞·ª£c ƒë·∫∑t ·ªü cu·ªëi m·∫£ng m√† kh√¥ng c·∫ßn sort to√†n
// b·ªô.

// ---

// ### üîπ T√≥m t·∫Øt:

// 1. T√¨m c·∫°nh l·ªõn nh·∫•t v√† l·ªõn nh√¨ ‚Üí ƒë∆∞a v·ªÅ cu·ªëi m·∫£ng.
// 2. Duy·ªát t·ª´ cu·ªëi m·∫£ng, m·ªói b∆∞·ªõc t√¨m c·∫°nh th·ª© 3 l·ªõn nh·∫•t ‚Üí ki·ªÉm tra tam gi√°c.
// 3. N·∫øu th·ªèa ‚Üí tr·∫£ v·ªÅ chu vi, else ‚Üí ti·∫øp t·ª•c.
// 4. N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c tam gi√°c h·ª£p l·ªá ‚Üí tr·∫£ v·ªÅ 0.

// ---

// üí° **∆Øu ƒëi·ªÉm**:

// * Kh√¥ng c·∫ßn sort to√†n b·ªô m·∫£ng ‚Üí ti·∫øt ki·ªám th·ªùi gian cho m·∫£ng r·∫•t l·ªõn.
// * Lu√¥n ki·ªÉm tra c√°c c·∫°nh l·ªõn nh·∫•t tr∆∞·ªõc ‚Üí ƒë·∫£m b·∫£o chu vi l√† l·ªõn nh·∫•t.

// ---

// N·∫øu b·∫°n mu·ªën, m√¨nh c√≥ th·ªÉ vi·∫øt **version c√≥ Scanner v√† main ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu
// t·ª´ ng∆∞·ªùi d√πng** theo code n√†y lu√¥n.

// B·∫°n c√≥ mu·ªën m√¨nh l√†m kh√¥ng?
// Ok!

// // M√¨nh s·∫Ω
// // vi·∫øt l·∫°i
// // code Java
// // cho b√†i**976.
// // Largest Perimeter Triangle**
// // theo thu·∫≠t to√°n`selectAndSwapMax`
// // c·ªßa b·∫°n, k√®m**
// // h√†m main
// // d√πng Scanner**v√†**
// // ch√∫ th√≠ch
// // chi ti·∫øt
// // t·ª´ng d√≤ng**:

// Gi·∫£i th√≠ch
// thu·∫≠t to√°n:

// 1.**selectAndSwapMax**:

// *
// Ch·ªçn ph·∫ßn
// t·ª≠ l·ªõn
// nh·∫•t trong
// m·∫£ng con`nums[0..idx]`
// v√† swap
// v·ªÅ v·ªã tr√≠`idx`.*
// Gi√∫p ƒë·∫£m
// b·∫£o r·∫±ng 3
// c·∫°nh l·ªõn
// nh·∫•t l·∫ßn
// l∆∞·ª£t n·∫±m
// ·ªü cu·ªëi
// m·∫£ng m√†
// kh√¥ng c·∫ßn
// sort to√†n b·ªô.

// 2.**
// Duy·ªát m·∫£ng
// t·ª´ cu·ªëi**:

// *L·∫•y 3
// c·∫°nh l·ªõn
// li√™n ti·∫øp`nums[i-2],nums[i-1],nums[i]`.*
// Ki·ªÉm tra
// ƒëi·ªÅu ki·ªán
// tam gi√°c`a+b>c`.*
// N·∫øu ƒë√∫ng‚Üí
// tr·∫£ v·ªÅ
// chu vi
// l·ªõn nh·∫•t.

// 3.**
// N·∫øu kh√¥ng
// c√≥ tam
// gi√°c h·ª£p l·ªá**:

// *
// Tr·∫£ v·ªÅ`0`.

// 4.**
// H√†m main**:

// *
// Nh·∫≠p s·ªë
// l∆∞·ª£ng c·∫°nh
// v√† c√°c c·∫°nh.*
// T·∫°o ƒë·ªëi
// t∆∞·ª£ng Solution.*
// G·ªçi h√†m
// v√† in
// chu vi
// l·ªõn nh·∫•t.

// ---

// V√≠ d·ª•:

// ```Input:4 3 6 2 3

// Output:8```

// *
// Sort t·∫°m:[2,3,3,6]*Duy·ªát 3
// c·∫°nh l·ªõn:(3,3,6)‚Üí3+3>6?Kh√¥ng*(2,3,3)‚Üí2+3>3?C√≥‚Üí
// chu vi = 8‚úÖ

// ---

// N·∫øu b·∫°n mu·ªën,
// m√¨nh c√≥
// th·ªÉ vi·∫øt**version t·ªëi
// ∆∞u h∆°n

// O(n log n) b·∫±ng sort** v·ªõi code Java ng·∫Øn g·ªçn.

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n kh√¥ng?

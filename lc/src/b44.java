
// // #3005. Count Elements With Maximum Frequency(22/09/2025)from collections
import java.util.*;

public class b44 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        int n = sc.nextInt();
        int[] nums = new int[n];

        // Nh·∫≠p m·∫£ng
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng Solution v√† g·ªçi h√†m

        int result = maxFrequencyElements(nums);

        // In k·∫øt qu·∫£
        System.out.println(result);

        sc.close();
    }

    public static int maxFrequencyElements(int[] nums) {
        int n = nums.length;

        // B1: T√¨m gi√° tr·ªã l·ªõn nh·∫•t trong m·∫£ng nums
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }

        // B2: T·∫°o m·∫£ng ƒë·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa t·ª´ng s·ªë
        int[] arr = new int[max + 1];
        for (int i = 0; i < n; i++) {
            arr[nums[i]]++;
        }

        // B3: T√¨m t·∫ßn su·∫•t l·ªõn nh·∫•t (maxFreq) v√† s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ ƒë·∫°t maxFreq
        int maxFreq = 0;
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (maxFreq < arr[i]) {
                maxFreq = arr[i]; // c·∫≠p nh·∫≠t t·∫ßn su·∫•t l·ªõn nh·∫•t
                count = 1; // reset l·∫°i s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ ƒë·∫°t maxFreq
            } else if (maxFreq == arr[i]) {
                count++; // c√≥ th√™m 1 s·ªë n·ªØa ƒë·∫°t c√πng maxFreq
            }
        }

        // B4: T·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán = count * maxFreq
        return count * maxFreq;
    }

}

// Oküëç

// m√¨nh gi·∫£i
// th√≠ch chi
// ti·∫øt thu·∫≠t
// to√°n trong
// code b·∫°n ƒë∆∞a:

// ---

// ###**ƒê·ªÅ b√†i:**

// Ta c·∫ßn**
// ƒë·∫øm t·ªïng
// s·ªë l·∫ßn
// xu·∫•t hi·ªán**
// c·ªßa nh·ªØng
// ph·∫ßn t·ª≠ c√≥**
// t·∫ßn su·∫•t
// cao nh·∫•t**
// trong m·∫£ng`nums`.

// V√≠ d·ª•:

// ```nums=[1,2,2,3,1,4]```

// *1
// xu·∫•t hi·ªán 2 l·∫ßn*2
// xu·∫•t hi·ªán 2 l·∫ßn*3
// xu·∫•t hi·ªán 1 l·∫ßn*4
// xu·∫•t hi·ªán 1 l·∫ßnüëâ
// T·∫ßn su·∫•t
// cao nh·∫•t = 2üëâ
// C√°c ph·∫ßn
// t·ª≠ ƒë·∫°t
// t·∫ßn su·∫•t
// cao nh·∫•t = {1, 2}(2
// ph·∫ßn t·ª≠)üëâ
// T·ªïng s·ªë
// l·∫ßn xu·∫•t hi·ªán=2\*2=**4**

// ---

// ###**Gi·∫£i th√≠ch code:**

// ####üîπB1:
// T√¨m gi√°
// tr·ªã l·ªõn
// nh·∫•t trong m·∫£ng

// ```java
// int max = Integer.MIN_VALUE;for(
// int i = 0;i<n;i++)
// {
// if (nums[i] > max) {
// max = nums[i];
// }
// }```

// *
// M·ª•c ƒë√≠ch:
// ƒë·ªÉ bi·∫øt m·∫£ng`arr`(m·∫£ng t·∫ßn su·∫•t)
// c·∫ßn c√≥
// k√≠ch th∆∞·ªõc
// bao nhi√™u.*
// V√≠ d·ª•:n·∫øu`nums`
// c√≥ gi√°
// tr·ªã l·ªõn nh·∫•t=7‚Üí
// ta c·∫ßn m·∫£ng`arr[8]`(0..7).

// ---

// ####üîπB2:
// ƒê·∫øm t·∫ßn
// su·∫•t xu·∫•t hi·ªán

// ```java
// int[] arr = new int[max + 1];for(
// int i = 0;i<n;i++)
// {
// arr[nums[i]]++;
// }```

// *`arr[x]`=
// s·ªë l·∫ßn
// ph·∫ßn t·ª≠`x`
// xu·∫•t hi·ªán trong`nums`.*
// Sau v√≤ng l·∫∑p,`arr`
// s·∫Ω ch·ª©a
// ƒë·∫ßy ƒë·ªß
// t·∫ßn su·∫•t.

// V√≠ d·ª•:`nums=[1,2,2,3,1,4]`üëâ`arr=[0,2,2,1,1]`

// ---

// ####üîπB3:
// T√¨m t·∫ßn
// su·∫•t l·ªõn
// nh·∫•t v√†
// s·ªë ph·∫ßn
// t·ª≠ ƒë·∫°t
// ƒë∆∞·ª£c n√≥

// ```java
// int maxFreq = 0;
// int count = 0;for(
// int i = 0;i<arr.length;i++)
// {
// if (maxFreq < arr[i]) {
// maxFreq = arr[i]; // c·∫≠p nh·∫≠t maxFreq m·ªõi
// count = 1; // reset s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ ƒë·∫°t maxFreq
// } else if (maxFreq == arr[i]) {
// count++; // th√™m 1 ph·∫ßn t·ª≠ n·ªØa ƒë·∫°t c√πng maxFreq
// }
// }```

// *`maxFreq`:
// t·∫ßn su·∫•t
// l·ªõn nh·∫•t
// t√¨m ƒë∆∞·ª£c.*`count`:
// s·ªë l∆∞·ª£ng
// ph·∫ßn t·ª≠
// c√≥ t·∫ßn su·∫•t=`maxFreq`.

// V√≠ d·ª•:`arr=[0,2,2,1,1]`üëâ`maxFreq=2`,`count=2`(ph·∫ßn t·ª≠`1`v√†`2`).

// ---

// ####üîπB4:
// T√≠nh k·∫øt qu·∫£

// ```java return count*maxFreq;```

// *
// T·ªïng s·ªë
// l·∫ßn xu·∫•t hi·ªán=(
// s·ªë ph·∫ßn
// t·ª≠ c√≥
// t·∫ßn su·∫•t
// cao nh·∫•t)\*(
// t·∫ßn su·∫•t
// cao nh·∫•t).*
// V·ªõi v√≠
// d·ª• tr√™n:`2*2=4`.

// ---

// ###**
// ƒê·ªô ph·ª©c t·∫°p**

// *
// Th·ªùi gian:`O(n + max(nums))`
// * B·ªô nh·ªõ: `O(max(nums))`

// ---

// üëâ T√≥m g·ªçn:
// Thu·∫≠t to√°n n√†y **ƒë·∫øm t·∫ßn su·∫•t t·ª´ng ph·∫ßn t·ª≠**, sau ƒë√≥ **t√¨m ph·∫ßn t·ª≠ n√†o xu·∫•t
// hi·ªán nhi·ªÅu nh·∫•t** r·ªìi tr·∫£ v·ªÅ **t·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥
// c√πng t·∫ßn su·∫•t cao nh·∫•t**.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt l·∫°i c√°ch n√†y **ng·∫Øn h∆°n v√† t·ªëi ∆∞u h∆°n** (kh√¥ng c·∫ßn t√¨m
// `max` tr∆∞·ªõc, d√πng HashMap lu√¥n) kh√¥ng?

// // import Counter

// // class Solution:
// // def maxFrequencyElements(self, nums: list[int]) -> int:
// // # B1: ƒê·∫øm t·∫ßn su·∫•t c·ªßa t·ª´ng ph·∫ßn t·ª≠ trong nums
// // freq = Counter(nums) # vd: [1,2,2,3,1,4] -> {1:2, 2:2, 3:1, 4:1}

// // # B2: T√¨m t·∫ßn su·∫•t l·ªõn nh·∫•t
// // max_freq = max(freq.values()) # vd: max_freq = 2

// // # B3: C·ªông t·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥ t·∫ßn su·∫•t = max_freq
// // result = sum(count for count in freq.values() if count == max_freq)
// // # vd: freq = {1:2, 2:2, 3:1, 4:1} -> result = 2+2 = 4

// // return result

// // # Ok üëç m√¨nh s·∫Ω gi·∫£i th√≠ch ƒë·ªÅ **LeetCode 3005 - Count Elements With
// Maximum Frequency**.

// // # ---

// // # ## üìå ƒê·ªÅ b√†i

// // # Cho m·ªôt m·∫£ng s·ªë nguy√™n `nums`, b·∫°n c·∫ßn:

// // # 1. T√¨m **t·∫ßn su·∫•t xu·∫•t hi·ªán l·ªõn nh·∫•t**

// // trong m·∫£ng (m·ªôt s·ªë xu·∫•t hi·ªán nhi·ªÅu nh·∫•t).
// // # 2. Tr·∫£ v·ªÅ **t·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·∫•t c·∫£ c√°c s·ªë c√≥ t·∫ßn su·∫•t b·∫±ng t·∫ßn
// su·∫•t l·ªõn nh·∫•t**.

// // # ---

// // # ## üöÄ V√≠ d·ª•

// // # ### V√≠ d·ª• 1

// // # ```
// // # Input: nums = [1,2,2,3,1,4]
// // # ```

// // # * T·∫ßn su·∫•t:

// // # * 1 ‚Üí xu·∫•t hi·ªán 2 l·∫ßn
// // # * 2 ‚Üí xu·∫•t hi·ªán 2 l·∫ßn
// // # * 3 ‚Üí xu·∫•t hi·ªán 1 l·∫ßn
// // # * 4 ‚Üí xu·∫•t hi·ªán 1 l·∫ßn
// // # * T·∫ßn su·∫•t l·ªõn nh·∫•t = **2**
// // # * C√≥ 2 s·ªë ƒë·∫°t t·∫ßn su·∫•t n√†y: `1` v√† `2`.
// // # * T·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán = 2 (cho 1) + 2 (cho 2) = **4**.

// // # üëâ Output:

// // # ```
// // # 4
// // # ```

// // # ---

// // # ### V√≠ d·ª• 2

// // # ```
// // # Input: nums = [1,2,3,4,5]
// // # ```

// // # * T·∫ßn su·∫•t:

// // # * 1,2,3,4,5 ‚Üí m·ªói s·ªë ch·ªâ xu·∫•t hi·ªán 1 l·∫ßn.
// // # * T·∫ßn su·∫•t l·ªõn nh·∫•t = 1
// // # * C√≥ 5 s·ªë ƒë·∫°t t·∫ßn su·∫•t n√†y
// // # * T·ªïng s·ªë l·∫ßn xu·∫•t hi·ªán = 5 √ó 1 = **5**

// // # üëâ Output:

// // # ```
// // # 5
// // # ```

// // # ---

// // # ## üìä √ù t∆∞·ªüng thu·∫≠t to√°n

// // # 1. D√πng **hashmap (map ho·∫∑c dictionary)** ƒë·ªÉ ƒë·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa
// t·ª´ng s·ªë.
// // # 2. T√¨m gi√° tr·ªã t·∫ßn su·∫•t l·ªõn nh·∫•t `max_freq`.
// // # 3. Duy·ªát l·∫°i hashmap, c·ªông t·∫•t c·∫£ c√°c s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa nh·ªØng ph·∫ßn t·ª≠
// c√≥ `freq == max_freq`.

// // # ---

// // # ## ‚è±Ô∏è ƒê·ªô ph·ª©c t·∫°p

// // # * Th·ªùi gian: **O(n)** (duy·ªát m·∫£ng v√† map).
// // # * B·ªô nh·ªõ: **O(n)** (l∆∞u t·∫ßn su·∫•t).

// // # ---

// // # üëâ B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **code Java + Python c√≥ ch√∫ th√≠ch** cho
// b√†i n√†y kh√¥ng?
// // √Ä c√¢u h·ªèi r·∫•t hay üëç

// // Khi b·∫°n vi·∫øt:

// // ```java
// // int[] arr = new int[max + 1];
// // ```

// // l√† ƒë·ªÉ **t·∫°o m·∫£ng ƒë·∫øm t·∫ßn su·∫•t**.

// // ---

// // ### Gi·∫£i th√≠ch:

// // * `max` l√† **gi√° tr·ªã l·ªõn nh·∫•t** trong m·∫£ng `nums`.
// // * N·∫øu b·∫°n mu·ªën ƒë·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa t·ª´ng s·ªë t·ª´ `0` ƒë·∫øn `max`, th√¨
// c·∫ßn m·ªôt m·∫£ng c√≥ **ch·ªâ s·ªë t·ª´ 0 ƒë·∫øn max**.
// // * Trong Java, m·∫£ng c√≥ ƒë·ªô d√†i `L` th√¨ ch·ªâ s·ªë ch·∫°y t·ª´ `0` ƒë·∫øn `L - 1`.

// // ‚û°Ô∏è V√¨ v·∫≠y, n·∫øu b·∫°n ch·ªâ t·∫°o m·∫£ng `new int[max]` th√¨ ch·ªâ s·ªë cu·ªëi c√πng s·∫Ω l√†
// `max - 1`, **kh√¥ng ƒë·ªß ch·ªó ƒë·ªÉ ƒë·∫øm ph·∫ßn t·ª≠ b·∫±ng `max`**.

// // ---

// // ### V√≠ d·ª•:

// // Gi·∫£ s·ª≠ `nums = {1, 3, 2, 3}`

// // * `max = 3`

// // * B·∫°n mu·ªën c√≥ m·∫£ng `arr` l∆∞u t·∫ßn su·∫•t cho s·ªë `0, 1, 2, 3`.

// // * N·∫øu b·∫°n t·∫°o:

// // ```java
// // int[] arr = new int[max]; // int[3]
// // ```

// // th√¨ `arr` ch·ªâ c√≥ index `0,1,2`, kh√¥ng th·ªÉ l∆∞u cho s·ªë `3`. ‚Üí **L·ªói
// `IndexOutOfBounds`**.

// // * C√≤n khi vi·∫øt:

// // ```java
// // int[] arr = new int[max + 1]; // int[4]
// // ```

// // th√¨ `arr` c√≥ index `0,1,2,3` ‚Üí ƒë·ªß ƒë·ªÉ ƒë·∫øm c·∫£ s·ªë `3`.

// // ---

// // üëâ N√≥i ng·∫Øn g·ªçn: **`+1` ƒë·ªÉ m·∫£ng c√≥ index t·ª´ `0` ƒë·∫øn `max` (bao g·ªìm c·∫£
// `max`).**

// // ---

// // B·∫°n c√≥ mu·ªën m√¨nh so s√°nh lu√¥n v·ªõi c√°ch d√πng `HashMap` (kh√¥ng c·∫ßn `+1`,
// kh√¥ng ph·ª• thu·ªôc `max`) ƒë·ªÉ th·∫•y ∆∞u/nh∆∞·ª£c ƒëi·ªÉm kh√¥ng?

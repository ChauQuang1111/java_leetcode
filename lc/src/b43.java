
// 1912. Design Movie Rental System
import java.util.*;

class MovieRentingSystem {
    private static class Node {
        final int shop;
        final int movie;
        final int price;

        Node(int shop, int movie, int price) {
            this.shop = shop;
            this.movie = movie;
            this.price = price;
        }
    }

    // Comparator: price ‚Üë, shop ‚Üë, movie ‚Üë
    private static final Comparator<Node> CMP = (a, b) -> {
        int c = Integer.compare(a.price, b.price);
        if (c != 0)
            return c;
        c = Integer.compare(a.shop, b.shop);
        if (c != 0)
            return c;
        return Integer.compare(a.movie, b.movie);
    };

    private final Map<Integer, TreeSet<Node>> availableByMovie = new HashMap<>();
    private final TreeSet<Node> rentedSet = new TreeSet<>(CMP);
    private final Map<Long, Node> byPair = new HashMap<>();

    private static long key(int shop, int movie) {
        return (((long) shop) << 32) ^ (movie & 0xffffffffL);
    }

    public MovieRentingSystem(int n, int[][] entries) {
        for (int[] e : entries) {
            int shop = e[0], movie = e[1], price = e[2];
            Node node = new Node(shop, movie, price);
            byPair.put(key(shop, movie), node);
            availableByMovie
                    .computeIfAbsent(movie, k -> new TreeSet<>(CMP))
                    .add(node);
        }
    }

    public List<Integer> search(int movie) {
        List<Integer> ans = new ArrayList<>(5);
        TreeSet<Node> set = availableByMovie.get(movie);
        if (set == null || set.isEmpty())
            return ans;
        Iterator<Node> it = set.iterator();
        for (int i = 0; i < 5 && it.hasNext(); i++) {
            ans.add(it.next().shop);
        }
        return ans;
    }

    public void rent(int shop, int movie) {
        long k = key(shop, movie);
        Node node = byPair.get(k);
        if (node == null)
            return;
        TreeSet<Node> set = availableByMovie.get(movie);
        if (set != null)
            set.remove(node);
        rentedSet.add(node);
    }

    public void drop(int shop, int movie) {
        long k = key(shop, movie);
        Node node = byPair.get(k);
        if (node == null)
            return;
        rentedSet.remove(node);
        availableByMovie
                .computeIfAbsent(movie, x -> new TreeSet<>(CMP))
                .add(node);
    }

    public List<List<Integer>> report() {
        List<List<Integer>> ans = new ArrayList<>(5);
        Iterator<Node> it = rentedSet.iterator();
        for (int i = 0; i < 5 && it.hasNext(); i++) {
            Node n = it.next();
            ans.add(Arrays.asList(n.shop, n.movie));
        }
        return ans;
    }

    // ================== MAIN ==================
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Nh·∫≠p s·ªë shop v√† s·ªë entry
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] entries = new int[m][3];

        // Nh·∫≠p entries: shop, movie, price
        for (int i = 0; i < m; i++) {
            entries[i][0] = sc.nextInt();
            entries[i][1] = sc.nextInt();
            entries[i][2] = sc.nextInt();
        }

        // T·∫°o h·ªá th·ªëng
        MovieRentingSystem system = new MovieRentingSystem(n, entries);

        // Nh·∫≠p s·ªë thao t√°c
        int q = sc.nextInt();
        while (q-- > 0) {
            String cmd = sc.next();
            if (cmd.equals("search")) {
                int movie = sc.nextInt();
                System.out.println(system.search(movie));
            } else if (cmd.equals("rent")) {
                int shop = sc.nextInt();
                int movie = sc.nextInt();
                system.rent(shop, movie);
                System.out.println("rented " + shop + " " + movie);
            } else if (cmd.equals("drop")) {
                int shop = sc.nextInt();
                int movie = sc.nextInt();
                system.drop(shop, movie);
                System.out.println("dropped " + shop + " " + movie);
            } else if (cmd.equals("report")) {
                System.out.println(system.report());
            }
        }

        sc.close();
    }
}

// Ok, m√¨nh s·∫Ω gi·∫£i th√≠ch chi ti·∫øt ƒë·ªÅ **LeetCode 1912. Design Movie Rental
// System** cho b·∫°n nh√© üëá

// ---

// ## üé¨ ƒê·ªÅ b√†i:

// B·∫°n c·∫ßn thi·∫øt k·∫ø **Movie Rental System** (h·ªá th·ªëng cho thu√™ phim).

// * C√≥ `n` c·ª≠a h√†ng (`shops`), m·ªói c·ª≠a h√†ng c√≥ m·ªôt s·ªë b·ªô phim (`movies`) v·ªõi
// gi√° thu√™ (`price`).
// * Ng∆∞·ªùi d√πng c√≥ th·ªÉ **search** phim, **rent** phim, **drop** phim (tr·∫£ l·∫°i),
// v√† xem danh s√°ch phim ƒëang ƒë∆∞·ª£c thu√™ (**report**).

// ---

// ## üîß C√°c thao t√°c y√™u c·∫ßu c√†i ƒë·∫∑t:

// 1. **Constructor**

// * `MovieRentingSystem(int n, int[][] entries)`
// * `n`: s·ªë l∆∞·ª£ng c·ª≠a h√†ng.
// * `entries[i] = [shop, movie, price]`: c·ª≠a h√†ng `shop` c√≥ b·ªô phim `movie` v·ªõi
// gi√° `price`.

// ---

// 2. **search(int movie)**

// * Tr·∫£ v·ªÅ **t·ªëi ƒëa 5 c·ª≠a h√†ng** c√≥ b·ªô phim `movie` ch∆∞a b·ªã thu√™, s·∫Øp x·∫øp theo:

// 1. Gi√° **r·∫ª h∆°n** tr∆∞·ªõc
// 2. N·∫øu gi√° b·∫±ng nhau ‚Üí c·ª≠a h√†ng c√≥ **shop id nh·ªè h∆°n** tr∆∞·ªõc
// * N·∫øu < 5 k·∫øt qu·∫£ th√¨ tr·∫£ v·ªÅ t·∫•t c·∫£.

// ---

// 3. **rent(int shop, int movie)**

// * Thu√™ b·ªô phim `movie` t·ª´ c·ª≠a h√†ng `shop`.
// * B·ªô phim n√†y s·∫Ω kh√¥ng c√≤n xu·∫•t hi·ªán trong `search`.
// * Nh∆∞ng n√≥ s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v√†o danh s√°ch `report`.

// ---

// 4. **drop(int shop, int movie)**

// * Tr·∫£ l·∫°i b·ªô phim `movie` v·ªÅ c·ª≠a h√†ng `shop`.
// * Sau ƒë√≥ b·ªô phim n√†y l·∫°i c√≥ th·ªÉ xu·∫•t hi·ªán trong `search`.

// ---

// 5. **report()**

// * Tr·∫£ v·ªÅ **t·ªëi ƒëa 5 phim ƒëang ƒë∆∞·ª£c thu√™**, s·∫Øp x·∫øp theo:

// 1. Gi√° **r·∫ª h∆°n** tr∆∞·ªõc
// 2. N·∫øu gi√° b·∫±ng nhau ‚Üí `shop id` nh·ªè h∆°n tr∆∞·ªõc
// 3. N·∫øu v·∫´n b·∫±ng ‚Üí `movie id` nh·ªè h∆°n tr∆∞·ªõc

// ---

// ## üîë Y√™u c·∫ßu ch√≠nh:

// * Qu·∫£n l√Ω tr·∫°ng th√°i phim (c√≤n trong shop hay ƒë√£ thu√™).
// * H·ªó tr·ª£ t√¨m ki·∫øm (`search`) v√† th·ªëng k√™ (`report`) theo nhi·ªÅu ti√™u ch√≠ s·∫Øp
// x·∫øp.
// * Tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë√∫ng format (list c√°c shop/movie).

// ---

// ## üìù V√≠ d·ª•:

// ```text
// MovieRentingSystem obj = new MovieRentingSystem(3, [[0,1,5],[0,2,6],[0,3,7],
// [1,1,4],[2,1,5]]);
// ```

// * H·ªá th·ªëng c√≥ 3 c·ª≠a h√†ng.
// * Shop 0 c√≥ phim (1: gi√° 5), (2: gi√° 6), (3: gi√° 7).
// * Shop 1 c√≥ phim (1: gi√° 4).
// * Shop 2 c√≥ phim (1: gi√° 5).

// ---

// ```text
// search(1) ‚Üí [1,0,2]
// ```

// Gi·∫£i th√≠ch: phim `1` c√≥ trong shop 1 (gi√° 4), shop 0 (gi√° 5), shop 2 (gi√° 5).
// S·∫Øp x·∫øp theo gi√° + shopId ‚Üí `[1,0,2]`.

// ---

// ```text
// rent(0,1)
// ```

// Thu√™ phim `1` t·ª´ shop 0.
// ‚Üí Shop 0 kh√¥ng c√≤n cho thu√™ phim `1`.

// ---

// ```text
// search(1) ‚Üí [1,2]
// ```

// V√¨ phim `1` ·ªü shop 0 ƒë√£ b·ªã thu√™.

// ---

// ```text
// report() ‚Üí [[0,1]]
// ```

// V√¨ ch·ªâ c√≥ shop 0 ƒëang cho thu√™ phim `1`.

// ---

// ```text
// drop(0,1)
// ```

// Tr·∫£ l·∫°i phim `1` cho shop 0 ‚Üí l·∫°i c√≥ th·ªÉ `search`.

// ---

// ```text
// search(1) ‚Üí [1,0,2]
// ```

// L·∫°i gi·ªëng ban ƒë·∫ßu.

// ---

// ‚úÖ Nh∆∞ v·∫≠y, b√†i n√†y b·∫£n ch·∫•t l√† **thi·∫øt k·∫ø d·ªØ li·ªáu**:

// * D√πng **map** ƒë·ªÉ qu·∫£n l√Ω phim trong shop.
// * D√πng **set/heap** ƒë·ªÉ h·ªó tr·ª£ `search` v√† `report` v·ªõi ti√™u ch√≠ s·∫Øp x·∫øp.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **thu·∫≠t to√°n + c·∫•u tr√∫c d·ªØ li·ªáu ph√π h·ª£p
// (Java/Python)** ƒë·ªÉ implement b√†i n√†y kh√¥ng?
// B·∫°n ƒëang d√πng m·ªôt c√°ch tri·ªÉn khai r·∫•t t·ªëi ∆∞u üëç. M√¨nh gi·∫£i th√≠ch chi ti·∫øt
// **thu·∫≠t to√°n v√† c·∫•u tr√∫c d·ªØ li·ªáu** trong code tr√™n nh√©:

// ---

// ## üéØ √ù t∆∞·ªüng ch√≠nh

// H·ªá th·ªëng c·∫ßn h·ªó tr·ª£ 4 thao t√°c r·∫•t nhanh (nhi·ªÅu l·∫ßn g·ªçi, t·ªõi `10^5` l·ªánh):

// 1. `search(movie)` ‚Üí t√¨m 5 shop r·∫ª nh·∫•t cho m·ªôt movie.
// 2. `rent(shop, movie)` ‚Üí ƒë√°nh d·∫•u phim ƒë√£ ƒë∆∞·ª£c thu√™.
// 3. `drop(shop, movie)` ‚Üí tr·∫£ phim v·ªÅ tr·∫°ng th√°i available.
// 4. `report()` ‚Üí li·ªát k√™ 5 phim ƒëang thu√™ r·∫ª nh·∫•t.

// N·∫øu d√πng `List` v√† duy·ªát tuy·∫øn t√≠nh th√¨ qu√° ch·∫≠m. V√¨ v·∫≠y ta d√πng **TreeSet +
// HashMap** ƒë·ªÉ thao t√°c nhanh O(logN).

// ---

// ## üîë C√°c c·∫•u tr√∫c d·ªØ li·ªáu

// ### 1. `Node`

// ```java
// private static class Node {
// final int shop, movie, price;
// }
// ```

// ƒê·∫°i di·ªán m·ªôt b·∫£n sao c·ªßa movie trong m·ªôt shop, k√®m gi√° thu√™.

// ---

// ### 2. Comparator `CMP`

// ```java
// // S·∫Øp x·∫øp Node: theo price ‚Üë, r·ªìi shop ‚Üë, r·ªìi movie ‚Üë
// private static final Comparator<Node> CMP = ...
// ```

// D√πng ƒë·ªÉ TreeSet lu√¥n s·∫Øp x·∫øp theo **gi√°, shop, movie**.
// ‚Üí Khi duy·ªát TreeSet, ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n lu√¥n l√† copy "r·∫ª nh·∫•t, shop nh·ªè nh·∫•t".

// ---

// ### 3. `availableByMovie`

// ```java
// private final Map<Integer, TreeSet<Node>> availableByMovie;
// ```

// * Key: movie
// * Value: TreeSet c√°c Node `(shop, movie, price)` c√≤n **ch∆∞a thu√™**
// * Nh·ªù TreeSet ‚Üí khi g·ªçi `search(movie)` ch·ªâ c·∫ßn duy·ªát 5 ph·∫ßn t·ª≠ ƒë·∫ßu (O(5)).

// ---

// ### 4. `rentedSet`

// ```java
// private final TreeSet<Node> rentedSet;
// ```

// * L∆∞u t·∫•t c·∫£ Node ƒëang thu√™.
// * S·∫Øp x·∫øp to√†n c·ª•c theo `CMP` (price ‚Üë, shop ‚Üë, movie ‚Üë).
// * Nh·ªù TreeSet ‚Üí khi g·ªçi `report()` ch·ªâ c·∫ßn duy·ªát 5 ph·∫ßn t·ª≠ ƒë·∫ßu.

// ---

// ### 5. `byPair`

// ```java
// private final Map<Long, Node> byPair;
// ```

// * Key = `(shop, movie)` (ƒë∆∞·ª£c encode th√†nh long ƒë·ªÉ unique).
// * Value = `Node` t∆∞∆°ng ·ª©ng.
// * D√πng ƒë·ªÉ **truy c·∫≠p tr·ª±c ti·∫øp** m·ªôt b·∫£n copy khi c·∫ßn `rent` ho·∫∑c `drop`,
// thay v√¨ ph·∫£i t√¨m ki·∫øm trong TreeSet.

// ---

// ## ‚öôÔ∏è C√°c thao t√°c

// ### 1. `search(movie)`

// * L·∫•y `TreeSet<Node>` t·ª´ `availableByMovie[movie]`.
// * Duy·ªát 5 ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n ‚Üí tr·∫£ v·ªÅ danh s√°ch shop.
// * ƒê·ªô ph·ª©c t·∫°p: **O(5) = O(1)**.

// ---

// ### 2. `rent(shop, movie)`

// * D√πng `byPair` ƒë·ªÉ l·∫•y Node trong O(1).
// * X√≥a Node kh·ªèi `availableByMovie[movie]` (O(logN)).
// * Th√™m Node v√†o `rentedSet` (O(logN)).

// ---

// ### 3. `drop(shop, movie)`

// * D√πng `byPair` l·∫•y Node trong O(1).
// * X√≥a Node kh·ªèi `rentedSet` (O(logN)).
// * Th√™m l·∫°i Node v√†o `availableByMovie[movie]` (O(logN)).

// ---

// ### 4. `report()`

// * Duy·ªát 5 ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong `rentedSet`.
// * Tr·∫£ v·ªÅ c·∫∑p `[shop, movie]`.
// * ƒê·ªô ph·ª©c t·∫°p: **O(5) = O(1)**.

// ---

// ## ‚è±Ô∏è ƒê·ªô ph·ª©c t·∫°p

// * `search`: O(1)
// * `rent`: O(logN)
// * `drop`: O(logN)
// * `report`: O(1)

// V·ªõi N ‚â§ 10^5, t·ªïng s·ªë thao t√°c ‚â§ 10^5 ‚Üí ho√†n to√†n ch·∫°y trong gi·ªõi h·∫°n th·ªùi
// gian.

// ---

// üëâ T√≥m l·∫°i, gi·∫£i ph√°p n√†y **s·ª≠ d·ª•ng TreeSet + HashMap** ƒë·ªÉ ƒë·∫°t t·ªëc ƒë·ªô t·ªëi ∆∞u
// cho c·∫£ `search` v√† `report`, ƒë·ªìng th·ªùi qu·∫£n l√Ω nhanh tr·∫°ng th√°i phim (`rent`,
// `drop`).

// ---

// B·∫°n c√≥ mu·ªën m√¨nh th√™m **h√†m `main` + Scanner** ƒë·ªÉ test tr·ª±c ti·∫øp v·ªõi input
// m·∫´u LeetCode kh√¥ng?

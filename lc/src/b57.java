
// # 11. Container With Most Water (04/10/2025)
import java.util.*;

public class b57 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        int n = sc.nextInt();

        int[] height = new int[n];
        System.out.println("Nh·∫≠p chi·ªÅu cao c√°c c·ªôt:");
        for (int i = 0; i < n; i++) {
            height[i] = sc.nextInt();
        }

        int result = maxArea(height);

        System.out.println(result);

        sc.close();
    }

    public static int maxArea(int[] height) {
        int i = 0; // Con tr·ªè tr√°i
        int j = height.length - 1; // Con tr·ªè ph·∫£i
        int area = 0; // Di·ªán t√≠ch t·∫°m th·ªùi
        int maxArea = 0; // Di·ªán t√≠ch l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c

        // Duy·ªát cho ƒë·∫øn khi 2 con tr·ªè g·∫∑p nhau
        while (i < j) {
            // L·∫•y chi·ªÅu cao nh·ªè h∆°n gi·ªØa 2 c·ªôt
            int min = Math.min(height[i], height[j]);

            // T√≠nh di·ªán t√≠ch = chi·ªÅu cao * kho·∫£ng c√°ch
            area = min * (j - i);

            // C·∫≠p nh·∫≠t di·ªán t√≠ch l·ªõn nh·∫•t
            maxArea = Math.max(area, maxArea);

            // Di chuy·ªÉn con tr·ªè c√≥ chi·ªÅu cao nh·ªè h∆°n
            // V√¨ c·ªôt th·∫•p h∆°n gi·ªõi h·∫°n l∆∞·ª£ng n∆∞·ªõc ch·ª©a ƒë∆∞·ª£c
            while (i < j && height[i] <= min)
                i++; // B·ªè qua c·ªôt th·∫•p h∆°n ho·∫∑c b·∫±ng
            while (i < j && height[j] <= min)
                j--; // B·ªè qua c·ªôt th·∫•p h∆°n ho·∫∑c b·∫±ng
        }

        // Tr·∫£ v·ªÅ di·ªán t√≠ch l·ªõn nh·∫•t
        return maxArea;
    }
}

// R·∫•t hay üëç ƒê√¢y l√† m·ªôt **thu·∫≠t to√°n t·ªëi ∆∞u (two-pointer)** ƒë·ªÉ gi·∫£i b√†i
// **Container With Most Water (LeetCode 11)** b·∫±ng **Java**.
// T·ªõ s·∫Ω gi·∫£i th√≠ch chi ti·∫øt **t·ª´ng ph·∫ßn c·ªßa code** v√† **t∆∞ duy thu·∫≠t to√°n** ƒë·ªÉ
// b·∫°n hi·ªÉu s√¢u üëá

// ---

// ### üß© **M·ª•c ti√™u b√†i to√°n**

// Cho m·∫£ng `height[]`, m·ªói ph·∫ßn t·ª≠ l√† **chi·ªÅu cao c·ªßa c·ªôt**,
// Gi·ªØa hai c·ªôt c√≥ th·ªÉ ch·ª©a n∆∞·ªõc ‚Üí di·ªán t√≠ch =

// > (kho·∫£ng c√°ch gi·ªØa hai c·ªôt) √ó (chi·ªÅu cao c·ªßa c·ªôt th·∫•p h∆°n)

// Ta c·∫ßn **t√¨m di·ªán t√≠ch l·ªõn nh·∫•t c√≥ th·ªÉ ch·ª©a ƒë∆∞·ª£c**.

// ---

// ### üí° **√ù t∆∞·ªüng thu·∫≠t to√°n Two Pointers**

// 1. ƒê·∫∑t **hai con tr·ªè**:

// * `i` ·ªü **ƒë·∫ßu m·∫£ng** (b√™n tr√°i).
// * `j` ·ªü **cu·ªëi m·∫£ng** (b√™n ph·∫£i).

// 2. T√≠nh di·ªán t√≠ch n∆∞·ªõc gi·ªØa hai c·ªôt n√†y:

// * Chi·ªÅu cao kh·∫£ d·ª•ng l√† **c·ªôt th·∫•p h∆°n** ‚Üí `min(height[i], height[j])`
// * Chi·ªÅu r·ªông l√† **kho·∫£ng c√°ch gi·ªØa 2 c·ªôt** ‚Üí `(j - i)`
// * Di·ªán t√≠ch = `min * (j - i)`

// 3. C·∫≠p nh·∫≠t **maxArea** n·∫øu di·ªán t√≠ch l·ªõn h∆°n gi√° tr·ªã c≈©.

// 4. **Di chuy·ªÉn con tr·ªè ·ªü ph√≠a th·∫•p h∆°n**:

// * N·∫øu c·ªôt tr√°i th·∫•p h∆°n (`height[i] <= height[j]`), th√¨ **tƒÉng i** (d·ªãch sang
// ph·∫£i).
// * N·∫øu c·ªôt ph·∫£i th·∫•p h∆°n (`height[j] < height[i]`), th√¨ **gi·∫£m j** (d·ªãch sang
// tr√°i).
// üëâ V√¨ ch·ªâ c√≥ tƒÉng chi·ªÅu cao m·ªõi c√≥ th·ªÉ t·∫°o di·ªán t√≠ch l·ªõn h∆°n.

// 5. **L·∫∑p l·∫°i** cho ƒë·∫øn khi hai con tr·ªè g·∫∑p nhau.

// ---

// ### üß† **Gi·∫£i th√≠ch t·ª´ng d√≤ng code**

// ```java
// int i = 0;
// int j = height.length -1;
// int area = 0;
// int maxArea = 0;
// ```

// üëâ Kh·ªüi t·∫°o 2 con tr·ªè ·ªü ƒë·∫ßu v√† cu·ªëi, v√† 2 bi·∫øn ƒë·ªÉ l∆∞u di·ªán t√≠ch hi·ªán t·∫°i &
// l·ªõn nh·∫•t.

// ---

// ```java
// while (i < j) {
// ```

// üëâ L·∫∑p ƒë·∫øn khi 2 con tr·ªè g·∫∑p nhau.

// ---

// ```java
// int min = Math.min(height[i], height[j]);
// ```

// üëâ L·∫•y **c·ªôt th·∫•p h∆°n** l√†m chi·ªÅu cao n∆∞·ªõc.

// ---

// ```java
// area = min * (j - i);
// ```

// üëâ T√≠nh di·ªán t√≠ch n∆∞·ªõc gi·ªØa hai c·ªôt hi·ªán t·∫°i.

// ---

// ```java
// maxArea = Math.max(area, maxArea);
// ```

// üëâ C·∫≠p nh·∫≠t di·ªán t√≠ch l·ªõn nh·∫•t n·∫øu t√¨m th·∫•y gi√° tr·ªã m·ªõi.

// ---

// ```java
// while(i < j && height[i] <= min) i++;
// while(i < j && height[j] <= min) j--;
// ```

// üëâ Di chuy·ªÉn con tr·ªè:

// * N·∫øu c·ªôt tr√°i ‚â§ c·ªôt th·∫•p nh·∫•t (`min`), ta b·ªè qua n√≥ (v√¨ c·ªôt n√†y kh√¥ng gi√∫p
// tƒÉng chi·ªÅu cao).
// * T∆∞∆°ng t·ª±, n·∫øu c·ªôt ph·∫£i ‚â§ `min`, ta c≈©ng d·ªãch sang tr√°i.
// => **B·ªè qua c√°c c·ªôt th·∫•p h∆°n ho·∫∑c b·∫±ng c·ªôt hi·ªán t·∫°i** v√¨ ch√∫ng kh√¥ng th·ªÉ t·∫°o
// di·ªán t√≠ch l·ªõn h∆°n ƒë∆∞·ª£c.

// ---

// ```java
// return maxArea;
// ```

// üëâ K·∫øt th√∫c, tr·∫£ v·ªÅ di·ªán t√≠ch l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c.

// ---

// ### üîç **V√≠ d·ª• minh h·ªça**

// Gi·∫£ s·ª≠:

// ```
// height = [1,8,6,2,5,4,8,3,7]
// ```

// | i | j | height[i] | height[j] | min | width | area | maxArea |
// | --- | --- | --------- | --------- | --- | ----- | ---- | ------- |
// | 0 | 8 | 1 | 7 | 1 | 8 | 8 | 8 |
// | 1 | 8 | 8 | 7 | 7 | 7 | 49 | 49 ‚úÖ |
// | ... | ... | ... | ... | ... | ... | ... | ... |

// K·∫øt qu·∫£ cu·ªëi c√πng: **49**

// ---

// ### ‚öôÔ∏è **ƒê·ªô ph·ª©c t·∫°p**

// * ‚è±Ô∏è **Th·ªùi gian:** O(n) ‚Üí m·ªói ph·∫ßn t·ª≠ duy·ªát t·ªëi ƒëa 1 l·∫ßn.
// * üíæ **B·ªô nh·ªõ:** O(1) ‚Üí ch·ªâ d√πng v√†i bi·∫øn ph·ª•.

// ---

// üëâ **T√≥m l·∫°i:**
// Thu·∫≠t to√°n n√†y hi·ªáu qu·∫£ v√¨:

// * Lu√¥n gi·ªØ 2 ƒë·∫ßu (kho·∫£ng c√°ch l·ªõn nh·∫•t tr∆∞·ªõc).
// * Gi·∫£m d·∫ßn kho·∫£ng c√°ch nh∆∞ng ch·ªâ khi **chi·ªÅu cao c√≥ kh·∫£ nƒÉng tƒÉng**, n√™n
// kh√¥ng b·ªè s√≥t tr∆∞·ªùng h·ª£p t·ªëi ∆∞u.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω **s∆° ƒë·ªì tr·ª±c quan 2 con tr·ªè di chuy·ªÉn t·ª´ng b∆∞·ªõc** (b·∫±ng
// h√¨nh ASCII ho·∫∑c s∆° ƒë·ªì n∆∞·ªõc) kh√¥ng? N√≥ gi√∫p d·ªÖ h√¨nh dung h∆°n r·∫•t nhi·ªÅu.

// # T·ªët l·∫Øm üëç ƒê√¢y l√† phi√™n b·∫£n **Python code c√≥ ch√∫ th√≠ch chi ti·∫øt t·ª´ng d√≤ng**
// cho b√†i **11. Container With Most Water**, k√®m **gi·∫£i th√≠ch thu·∫≠t to√°n** ·ªü
// cu·ªëi üëá

// # ---

// # ### üêç **Code c√≥ ch√∫ th√≠ch chi ti·∫øt**

// # ```python
// from typing import List
// class Solution:
// def maxArea(self, height: List[int]) -> int:
// ans = i = 0 # ans l√† di·ªán t√≠ch l·ªõn nh·∫•t; i l√† con tr·ªè b√™n tr√°i
// j = len(height) - 1 # j l√† con tr·ªè b√™n ph·∫£i (cu·ªëi m·∫£ng)

// while j > i: # l·∫∑p khi 2 con tr·ªè ch∆∞a g·∫∑p nhau
// # T√≠nh di·ªán t√≠ch n∆∞·ªõc gi·ªØa 2 c·ªôt i v√† j
// temp = (j - i) * min(height[i], height[j])

// # N·∫øu di·ªán t√≠ch hi·ªán t·∫°i l·ªõn h∆°n max -> c·∫≠p nh·∫≠t
// if temp > ans:
// ans = temp
// else:
// # N·∫øu c·ªôt b√™n tr√°i cao h∆°n c·ªôt b√™n ph·∫£i
// if height[i] > height[j]:
// temp = j # L∆∞u l·∫°i v·ªã tr√≠ c·ªôt ph·∫£i hi·ªán t·∫°i
// # D·ªãch con tr·ªè ph·∫£i sang tr√°i ƒë·ªÉ t√¨m c·ªôt cao h∆°n
// while j != i:
// j -= 1
// # N·∫øu g·∫∑p c·ªôt cao h∆°n c·ªôt c≈© -> d·ª´ng
// if height[j] > height[temp]:
// break
// else:
// temp = i # L∆∞u l·∫°i v·ªã tr√≠ c·ªôt tr√°i hi·ªán t·∫°i
// # D·ªãch con tr·ªè tr√°i sang ph·∫£i ƒë·ªÉ t√¨m c·ªôt cao h∆°n
// while j != i:
// i += 1
// # N·∫øu g·∫∑p c·ªôt cao h∆°n c·ªôt c≈© -> d·ª´ng
// if height[i] > height[temp]:
// break

// return ans # Tr·∫£ v·ªÅ di·ªán t√≠ch l·ªõn nh·∫•t t√¨m ƒë∆∞·ª£c

// # ### üß† **Gi·∫£i th√≠ch thu·∫≠t to√°n**

// # Thu·∫≠t to√°n n√†y l√† **bi·∫øn th·ªÉ c·ªßa Two Pointer Optimization**, √Ω t∆∞·ªüng nh∆∞
// sau:

// # 1. **Hai con tr·ªè `i` (tr√°i) v√† `j` (ph·∫£i):**

// # * Ban ƒë·∫ßu, ƒë·ª©ng ·ªü hai ƒë·∫ßu c·ªßa m·∫£ng `height`.
// # * Di·ªán t√≠ch n∆∞·ªõc gi·ªØa hai c·ªôt = `(kho·∫£ng c√°ch) √ó (chi·ªÅu cao th·∫•p h∆°n)`
// # üëâ `area = (j - i) * min(height[i], height[j])`

// # 2. **C·∫≠p nh·∫≠t k·∫øt qu·∫£:**

// # * Gi·ªØ l·∫°i di·ªán t√≠ch l·ªõn nh·∫•t `ans`.

// # 3. **D·ªãch con tr·ªè th·∫•p h∆°n:**

// # * N·∫øu `height[i] < height[j]`, ta di chuy·ªÉn `i` sang ph·∫£i ƒë·ªÉ t√¨m c·ªôt cao
// h∆°n ‚Üí **hy v·ªçng tƒÉng chi·ªÅu cao**.
// # * Ng∆∞·ª£c l·∫°i, n·∫øu `height[j] < height[i]`, ta di chuy·ªÉn `j` sang tr√°i.
// # * Trong code n√†y, n√≥ **d·ªãch con tr·ªè nhi·ªÅu b∆∞·ªõc li·ªÅn m·ªôt l√∫c** (b·ªè qua c√°c
// c·ªôt th·∫•p h∆°n c·ªôt c≈© ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian).

// # 4. **D·ª´ng khi hai con tr·ªè g·∫∑p nhau.**

// # ---

// # ### üß© **V√≠ d·ª• minh h·ªça**

// # ```
// # height = [1,8,6,2,5,4,8,3,7]
// # ```

// # * B·∫Øt ƒë·∫ßu: i=0 (1), j=8 (7)
// # ‚Üí min=1, width=8 ‚Üí area=8
// # * D·ªãch i v√¨ 1<7
// # ‚Üí i=1 (8), j=8 (7) ‚Üí min=7, width=7 ‚Üí area=49 ‚úÖ
// # * Sau ƒë√≥ d·ªãch j sang tr√°i khi g·∫∑p c·ªôt th·∫•p h∆°n...
// # ‚Üí k·∫øt qu·∫£ cu·ªëi c√πng: **49**

// # ---

// # üëâ **T√≥m g·ªçn:**

// # * D√πng 2 con tr·ªè ƒë·ªÉ t√¨m di·ªán t√≠ch t·ªëi ƒëa.
// # * Lu√¥n d·ªãch con tr·ªè ·ªü ph√≠a c√≥ c·ªôt th·∫•p h∆°n.
// # * Phi√™n b·∫£n code c·ªßa b·∫°n l√† b·∫£n **t·ªëi ∆∞u h∆°n**, v√¨ n√≥ b·ªè qua c√°c c·ªôt kh√¥ng
// c√≥ kh·∫£ nƒÉng t·∫°o di·ªán t√≠ch l·ªõn h∆°n.

// # ---

// # B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω **s∆° ƒë·ªì minh h·ªça tr·ª±c quan t·ª´ng b∆∞·ªõc di chuy·ªÉn c·ªßa con
// tr·ªè (i, j)** kh√¥ng?
// # R·∫•t d·ªÖ hi·ªÉu khi nh√¨n b·∫±ng h√¨nh.

// # T·∫•t nhi√™n üëç
// # ƒê·ªÅ b√†i **‚Äú11. Container With Most Water‚Äù** (LeetCode 11) l√† m·ªôt b√†i **kinh
// ƒëi·ªÉn v·ªÅ hai con tr·ªè (two pointers)**.
// # Gi·∫£i th√≠ch chi ti·∫øt nh∆∞ sau üëá

// # ---

// # ### üß© **ƒê·ªÅ b√†i (phi√™n b·∫£n d·ªÖ hi·ªÉu)**

// # B·∫°n ƒë∆∞·ª£c cho m·ªôt **m·∫£ng s·ªë nguy√™n `height[]`**, trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ bi·ªÉu
// th·ªã **chi·ªÅu cao c·ªßa m·ªôt c·ªôt**.
// # Hai c·ªôt n√†y v√† tr·ª•c ho√†nh (x-axis) t·∫°o th√†nh **m·ªôt c√°i ‚Äúcontainer‚Äù ch·ª©a
// n∆∞·ªõc**.

// # M·ª•c ti√™u l√†:
// # üëâ **Ch·ªçn hai c·ªôt sao cho container gi·ªØa ch√∫ng ch·ª©a ƒë∆∞·ª£c nhi·ªÅu n∆∞·ªõc nh·∫•t.**

// # ---

// # ### üìä **V√≠ d·ª•**

// # Gi·∫£ s·ª≠:

// # ```python
// # height = [1,8,6,2,5,4,8,3,7]
// # ```

// # N·∫øu ta ch·ªçn:

// # * c·ªôt th·ª© 2 (cao 8)
// # * v√† c·ªôt th·ª© 9 (cao 7)

// # ‚Üí chi·ªÅu r·ªông gi·ªØa hai c·ªôt l√† `9 - 2 = 7`
// # ‚Üí chi·ªÅu cao b·ªã gi·ªõi h·∫°n b·ªüi c·ªôt th·∫•p h∆°n: `min(8,7) = 7`

// # => **Di·ªán t√≠ch n∆∞·ªõc ch·ª©a ƒë∆∞·ª£c = 7 * 7 = 49**

// # ƒê√¢y c≈©ng l√† **k·∫øt qu·∫£ l·ªõn nh·∫•t** trong v√≠ d·ª• n√†y.

// # ---

// # ### üìê **C√¥ng th·ª©c t√≠nh di·ªán t√≠ch n∆∞·ªõc gi·ªØa hai c·ªôt**

// # N·∫øu ch·ªçn hai c·ªôt ·ªü v·ªã tr√≠ `i` v√† `j` (v·ªõi `i < j`):

// # [
// # \text{Area} = (j - i) \times \min(height[i], height[j])
// # ]

// # ---

// # ### ‚öôÔ∏è **T∆∞ duy thu·∫≠t to√°n (Two pointers)**

// # 1. ƒê·∫∑t hai con tr·ªè:

// # * `left = 0` (ƒë·∫ßu m·∫£ng)
// # * `right = n - 1` (cu·ªëi m·∫£ng)

// # 2. T√≠nh di·ªán t√≠ch:

// # ```java
// # area = (right - left) * min(height[left], height[right])
// # ```

// # C·∫≠p nh·∫≠t `maxArea` n·∫øu l·ªõn h∆°n.

// # 3. **Di chuy·ªÉn con tr·ªè th·∫•p h∆°n**:

// # * N·∫øu `height[left] < height[right]`, tƒÉng `left++`
// # * Ng∆∞·ª£c l·∫°i, gi·∫£m `right--`

// # ‚û°Ô∏è V√¨ ch·ªâ c√≥ vi·ªác **di chuy·ªÉn c·ªôt th·∫•p h∆°n m·ªõi c√≥ kh·∫£ nƒÉng tƒÉng di·ªán t√≠ch**
// (chi·ªÅu cao gi·ªõi h·∫°n s·∫Ω tƒÉng).

// # 4. L·∫∑p ƒë·∫øn khi `left >= right`.

// # ---

// # ### üí° **V√≠ d·ª• minh h·ªça ng·∫Øn**

// # | left | right | height[left] | height[right] | width | minHeight | area |
// max |
// # | ---- | ----- | ------------ | ------------- | ----- | --------- | ---- |
// ------ |
// # | 0 | 8 | 1 | 7 | 8 | 1 | 8 | 8 |
// # | 1 | 8 | 8 | 7 | 7 | 7 | 49 | **49** |
// # | ... | ... | ... | ... | ... | ... | ... | ... |

// # K·∫øt qu·∫£ cu·ªëi c√πng: **49**

// # ---

// # ### üß† **ƒê·ªô ph·ª©c t·∫°p**

// # * **Th·ªùi gian:** O(n)
// # * **B·ªô nh·ªõ:** O(1)

// # ---

// # B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **code Java** cho b√†i n√†y k√®m **ch√∫ th√≠ch t·ª´ng
// d√≤ng** kh√¥ng?
